// Generated by Haxe 4.3.7
#ifndef INCLUDED_custom_haxe_Int128Helper
#define INCLUDED_custom_haxe_Int128Helper

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(custom,haxe,Int128Helper)

namespace custom{
namespace haxe{


class HXCPP_CLASS_ATTRIBUTES Int128Helper_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Int128Helper_obj OBJ_;
		Int128Helper_obj();

	public:
		enum { _hx_ClassId = 0x31aba16d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="custom.haxe.Int128Helper")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"custom.haxe.Int128Helper"); }

		inline static ::hx::ObjectPtr< Int128Helper_obj > __new() {
			::hx::ObjectPtr< Int128Helper_obj > __this = new Int128Helper_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Int128Helper_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Int128Helper_obj *__this = (Int128Helper_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Int128Helper_obj), false, "custom.haxe.Int128Helper"));
			*(void **)__this = Int128Helper_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Int128Helper_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Int128Helper",56,f8,8a,1e); }

		static void __boot();
		static ::Array< ::cpp::Int64 > parseString(::String sParam);
		static ::Dynamic parseString_dyn();

		static ::Array< ::cpp::Int64 > fromFloat(Float f);
		static ::Dynamic fromFloat_dyn();

		static ::Array< ::cpp::Int64 > maxValue;
		static ::Array< ::cpp::Int64 > minValue;
		static ::Array< ::cpp::Int64 > maxValue64;
		static ::Array< ::cpp::Int64 > minValue64;
		static ::Array< ::cpp::Int64 > maxValue64U;
		static ::Array< ::cpp::Int64 > maxValue32;
		static ::Array< ::cpp::Int64 > minValue32;
		static ::Array< ::cpp::Int64 > maxValue32U;
		static ::Array< ::cpp::Int64 > BILLION;
		static ::Array< ::cpp::Int64 > QUINTILLION;
		static ::Array< ::cpp::Int64 > UNDECILLION;
};

} // end namespace custom
} // end namespace haxe

#endif /* INCLUDED_custom_haxe_Int128Helper */ 
