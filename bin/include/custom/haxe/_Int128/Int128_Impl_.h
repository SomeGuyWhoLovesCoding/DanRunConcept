// Generated by Haxe 4.3.7
#ifndef INCLUDED_custom_haxe__Int128_Int128_Impl_
#define INCLUDED_custom_haxe__Int128_Int128_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(custom,haxe,_Int128,Int128_Impl_)

namespace custom{
namespace haxe{
namespace _Int128{


class HXCPP_CLASS_ATTRIBUTES Int128_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Int128_Impl__obj OBJ_;
		Int128_Impl__obj();

	public:
		enum { _hx_ClassId = 0x6202aff4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="custom.haxe._Int128.Int128_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"custom.haxe._Int128.Int128_Impl_"); }

		inline static ::hx::ObjectPtr< Int128_Impl__obj > __new() {
			::hx::ObjectPtr< Int128_Impl__obj > __this = new Int128_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Int128_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			Int128_Impl__obj *__this = (Int128_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Int128_Impl__obj), false, "custom.haxe._Int128.Int128_Impl_"));
			*(void **)__this = Int128_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Int128_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Int128_Impl_",68,43,31,32); }

		static ::Array< ::cpp::Int64 > _new(::Array< ::cpp::Int64 > x);
		static ::Dynamic _new_dyn();

		static ::Array< ::cpp::Int64 > copy(::Array< ::cpp::Int64 > this1);
		static ::Dynamic copy_dyn();

		static ::Array< ::cpp::Int64 > make(::cpp::Int64 high,::cpp::Int64 low);
		static ::Dynamic make_dyn();

		static ::Array< ::cpp::Int64 > ofInt(int x);
		static ::Dynamic ofInt_dyn();

		static ::Array< ::cpp::Int64 > ofInt64(::cpp::Int64 x);
		static ::Dynamic ofInt64_dyn();

		static int toInt(::Array< ::cpp::Int64 > x);
		static ::Dynamic toInt_dyn();

		static ::cpp::Int64 toInt64(::Array< ::cpp::Int64 > x);
		static ::Dynamic toInt64_dyn();

		static bool isNeg(::Array< ::cpp::Int64 > x);
		static ::Dynamic isNeg_dyn();

		static bool isZero(::Array< ::cpp::Int64 > x);
		static ::Dynamic isZero_dyn();

		static ::cpp::Int64 compare(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b);
		static ::Dynamic compare_dyn();

		static ::cpp::Int64 ucompare(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b);
		static ::Dynamic ucompare_dyn();

		static ::String toStr(::Array< ::cpp::Int64 > x);
		static ::Dynamic toStr_dyn();

		static ::String toString(::Array< ::cpp::Int64 > this1);
		static ::Dynamic toString_dyn();

		static ::Array< ::cpp::Int64 > parseString(::String sParam);
		static ::Dynamic parseString_dyn();

		static ::Array< ::cpp::Int64 > fromFloat(Float f);
		static ::Dynamic fromFloat_dyn();

		static  ::Dynamic divMod(::Array< ::cpp::Int64 > dividend,::Array< ::cpp::Int64 > divisor);
		static ::Dynamic divMod_dyn();

		static ::Array< ::cpp::Int64 > neg(::Array< ::cpp::Int64 > x);
		static ::Dynamic neg_dyn();

		static ::Array< ::cpp::Int64 > preIncrement(::Array< ::cpp::Int64 > this1);
		static ::Dynamic preIncrement_dyn();

		static ::Array< ::cpp::Int64 > postIncrement(::Array< ::cpp::Int64 > this1);
		static ::Dynamic postIncrement_dyn();

		static ::Array< ::cpp::Int64 > preDecrement(::Array< ::cpp::Int64 > this1);
		static ::Dynamic preDecrement_dyn();

		static ::Array< ::cpp::Int64 > postDecrement(::Array< ::cpp::Int64 > this1);
		static ::Dynamic postDecrement_dyn();

		static ::Array< ::cpp::Int64 > add(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b);
		static ::Dynamic add_dyn();

		static ::Array< ::cpp::Int64 > addInt(::Array< ::cpp::Int64 > a,int b);
		static ::Dynamic addInt_dyn();

		static ::Array< ::cpp::Int64 > addInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b);
		static ::Dynamic addInt64_dyn();

		static ::Array< ::cpp::Int64 > intAdd(int a,::Array< ::cpp::Int64 > b);
		static ::Dynamic intAdd_dyn();

		static ::Array< ::cpp::Int64 > int64Add(::cpp::Int64 a,::Array< ::cpp::Int64 > b);
		static ::Dynamic int64Add_dyn();

		static ::Array< ::cpp::Int64 > sub(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b);
		static ::Dynamic sub_dyn();

		static ::Array< ::cpp::Int64 > subInt(::Array< ::cpp::Int64 > a,int b);
		static ::Dynamic subInt_dyn();

		static ::Array< ::cpp::Int64 > subInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b);
		static ::Dynamic subInt64_dyn();

		static ::Array< ::cpp::Int64 > intSub(int a,::Array< ::cpp::Int64 > b);
		static ::Dynamic intSub_dyn();

		static ::Array< ::cpp::Int64 > int64Sub(::cpp::Int64 a,::Array< ::cpp::Int64 > b);
		static ::Dynamic int64Sub_dyn();

		static ::Array< ::cpp::Int64 > mul(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b);
		static ::Dynamic mul_dyn();

		static ::Array< ::cpp::Int64 > mulInt(::Array< ::cpp::Int64 > a,int b);
		static ::Dynamic mulInt_dyn();

		static ::Array< ::cpp::Int64 > mulInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b);
		static ::Dynamic mulInt64_dyn();

		static ::Array< ::cpp::Int64 > intMul(int a,::Array< ::cpp::Int64 > b);
		static ::Dynamic intMul_dyn();

		static ::Array< ::cpp::Int64 > int64Mul(::cpp::Int64 a,::Array< ::cpp::Int64 > b);
		static ::Dynamic int64Mul_dyn();

		static ::Array< ::cpp::Int64 > div(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b);
		static ::Dynamic div_dyn();

		static ::Array< ::cpp::Int64 > divInt(::Array< ::cpp::Int64 > a,int b);
		static ::Dynamic divInt_dyn();

		static ::Array< ::cpp::Int64 > divInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b);
		static ::Dynamic divInt64_dyn();

		static ::Array< ::cpp::Int64 > intDiv(int a,::Array< ::cpp::Int64 > b);
		static ::Dynamic intDiv_dyn();

		static ::Array< ::cpp::Int64 > int64Div(::cpp::Int64 a,::Array< ::cpp::Int64 > b);
		static ::Dynamic int64Div_dyn();

		static ::Array< ::cpp::Int64 > mod(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b);
		static ::Dynamic mod_dyn();

		static ::Array< ::cpp::Int64 > modInt(::Array< ::cpp::Int64 > a,int b);
		static ::Dynamic modInt_dyn();

		static ::Array< ::cpp::Int64 > modInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b);
		static ::Dynamic modInt64_dyn();

		static ::Array< ::cpp::Int64 > intMod(int a,::Array< ::cpp::Int64 > b);
		static ::Dynamic intMod_dyn();

		static ::Array< ::cpp::Int64 > int64Mod(::cpp::Int64 a,::Array< ::cpp::Int64 > b);
		static ::Dynamic int64Mod_dyn();

		static bool eq(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b);
		static ::Dynamic eq_dyn();

		static bool eqInt(::Array< ::cpp::Int64 > a,int b);
		static ::Dynamic eqInt_dyn();

		static bool eqInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b);
		static ::Dynamic eqInt64_dyn();

		static bool neq(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b);
		static ::Dynamic neq_dyn();

		static bool neqInt(::Array< ::cpp::Int64 > a,int b);
		static ::Dynamic neqInt_dyn();

		static bool neqInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b);
		static ::Dynamic neqInt64_dyn();

		static bool lt(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b);
		static ::Dynamic lt_dyn();

		static bool ltInt(::Array< ::cpp::Int64 > a,int b);
		static ::Dynamic ltInt_dyn();

		static bool ltInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b);
		static ::Dynamic ltInt64_dyn();

		static bool lte(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b);
		static ::Dynamic lte_dyn();

		static bool lteInt(::Array< ::cpp::Int64 > a,int b);
		static ::Dynamic lteInt_dyn();

		static bool lteInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b);
		static ::Dynamic lteInt64_dyn();

		static bool gt(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b);
		static ::Dynamic gt_dyn();

		static bool gtInt(::Array< ::cpp::Int64 > a,int b);
		static ::Dynamic gtInt_dyn();

		static bool gtInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b);
		static ::Dynamic gtInt64_dyn();

		static bool gte(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b);
		static ::Dynamic gte_dyn();

		static bool gteInt(::Array< ::cpp::Int64 > a,int b);
		static ::Dynamic gteInt_dyn();

		static bool gteInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b);
		static ::Dynamic gteInt64_dyn();

		static ::Array< ::cpp::Int64 > complement(::Array< ::cpp::Int64 > a);
		static ::Dynamic complement_dyn();

		static ::Array< ::cpp::Int64 > _hx_and(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b);
		static ::Dynamic _hx_and_dyn();

		static ::Array< ::cpp::Int64 > _hx_or(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b);
		static ::Dynamic _hx_or_dyn();

		static ::Array< ::cpp::Int64 > _hx_xor(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b);
		static ::Dynamic _hx_xor_dyn();

		static ::Array< ::cpp::Int64 > shl(::Array< ::cpp::Int64 > a,int b);
		static ::Dynamic shl_dyn();

		static ::Array< ::cpp::Int64 > shr(::Array< ::cpp::Int64 > a,int b);
		static ::Dynamic shr_dyn();

		static ::Array< ::cpp::Int64 > ushr(::Array< ::cpp::Int64 > a,int b);
		static ::Dynamic ushr_dyn();

		static ::cpp::Int64 get_high(::Array< ::cpp::Int64 > this1);
		static ::Dynamic get_high_dyn();

		static ::cpp::Int64 set_high(::Array< ::cpp::Int64 > this1,::cpp::Int64 x);
		static ::Dynamic set_high_dyn();

		static ::cpp::Int64 get_low(::Array< ::cpp::Int64 > this1);
		static ::Dynamic get_low_dyn();

		static ::cpp::Int64 set_low(::Array< ::cpp::Int64 > this1,::cpp::Int64 x);
		static ::Dynamic set_low_dyn();

};

} // end namespace custom
} // end namespace haxe
} // end namespace _Int128

#endif /* INCLUDED_custom_haxe__Int128_Int128_Impl_ */ 
