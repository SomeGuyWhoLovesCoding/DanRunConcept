// Generated by Haxe 4.3.7
#ifndef INCLUDED_custom_haxe__Int128____Int128_Impl_
#define INCLUDED_custom_haxe__Int128____Int128_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(custom,haxe,_Int128,___Int128_Impl_)

namespace custom{
namespace haxe{
namespace _Int128{


class HXCPP_CLASS_ATTRIBUTES ___Int128_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ___Int128_Impl__obj OBJ_;
		___Int128_Impl__obj();

	public:
		enum { _hx_ClassId = 0x24b6021b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="custom.haxe._Int128.___Int128_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"custom.haxe._Int128.___Int128_Impl_"); }

		inline static ::hx::ObjectPtr< ___Int128_Impl__obj > __new() {
			::hx::ObjectPtr< ___Int128_Impl__obj > __this = new ___Int128_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< ___Int128_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			___Int128_Impl__obj *__this = (___Int128_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(___Int128_Impl__obj), false, "custom.haxe._Int128.___Int128_Impl_"));
			*(void **)__this = ___Int128_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~___Int128_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("___Int128_Impl_",27,0f,52,9c); }

		static ::cpp::Int64 get_high(::Array< ::cpp::Int64 > this1);
		static ::Dynamic get_high_dyn();

		static ::cpp::Int64 set_high(::Array< ::cpp::Int64 > this1,::cpp::Int64 value);
		static ::Dynamic set_high_dyn();

		static ::cpp::Int64 get_low(::Array< ::cpp::Int64 > this1);
		static ::Dynamic get_low_dyn();

		static ::cpp::Int64 set_low(::Array< ::cpp::Int64 > this1,::cpp::Int64 value);
		static ::Dynamic set_low_dyn();

		static ::Array< ::cpp::Int64 > _new(::cpp::Int64 high,::cpp::Int64 low);
		static ::Dynamic _new_dyn();

		static ::String toString(::Array< ::cpp::Int64 > this1);
		static ::Dynamic toString_dyn();

};

} // end namespace custom
} // end namespace haxe
} // end namespace _Int128

#endif /* INCLUDED_custom_haxe__Int128____Int128_Impl_ */ 
