// Generated by Haxe 4.3.7
#ifndef INCLUDED_stuff_TrackerFile
#define INCLUDED_stuff_TrackerFile

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(haxe,io,Output)
HX_DECLARE_CLASS1(stuff,CookingPanElement)
HX_DECLARE_CLASS1(stuff,DanRunElement)
HX_DECLARE_CLASS1(stuff,Element)
HX_DECLARE_CLASS1(stuff,EnemyElement)
HX_DECLARE_CLASS1(stuff,TrackerFile)
HX_DECLARE_CLASS2(sys,io,FileOutput)

namespace stuff{


class HXCPP_CLASS_ATTRIBUTES TrackerFile_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TrackerFile_obj OBJ_;
		TrackerFile_obj();

	public:
		enum { _hx_ClassId = 0x2658f6c0 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="stuff.TrackerFile")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"stuff.TrackerFile"); }

		inline static ::hx::ObjectPtr< TrackerFile_obj > __new() {
			::hx::ObjectPtr< TrackerFile_obj > __this = new TrackerFile_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< TrackerFile_obj > __alloc(::hx::Ctx *_hx_ctx) {
			TrackerFile_obj *__this = (TrackerFile_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TrackerFile_obj), false, "stuff.TrackerFile"));
			*(void **)__this = TrackerFile_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TrackerFile_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TrackerFile",34,ae,e6,8b); }

		static  ::sys::io::FileOutput file;
		static  ::haxe::io::Bytes enemyBuffer;
		static void init();
		static ::Dynamic init_dyn();

		static void putTime();
		static ::Dynamic putTime_dyn();

		static void close();
		static ::Dynamic close_dyn();

		static void addEnemyElement( ::stuff::EnemyElement elem);
		static ::Dynamic addEnemyElement_dyn();

		static void addPanElement( ::stuff::CookingPanElement elem);
		static ::Dynamic addPanElement_dyn();

		static void forfeitElement();
		static ::Dynamic forfeitElement_dyn();

};

} // end namespace stuff

#endif /* INCLUDED_stuff_TrackerFile */ 
