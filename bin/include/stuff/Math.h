// Generated by Haxe 4.3.7
#ifndef INCLUDED_stuff_Math
#define INCLUDED_stuff_Math

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(stuff,Math)

namespace stuff{


class HXCPP_CLASS_ATTRIBUTES Math_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Math_obj OBJ_;
		Math_obj();

	public:
		enum { _hx_ClassId = 0x45bf8bdc };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="stuff.Math")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"stuff.Math"); }

		inline static ::hx::ObjectPtr< Math_obj > __new() {
			::hx::ObjectPtr< Math_obj > __this = new Math_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Math_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Math_obj *__this = (Math_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Math_obj), false, "stuff.Math"));
			*(void **)__this = Math_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Math_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Math",e8,6d,2f,33); }

		static ::Array< ::cpp::Int64 > Randomold(Float time);
		static ::Dynamic Randomold_dyn();

		static ::Array< ::cpp::Int64 > Random(int from,int to);
		static ::Dynamic Random_dyn();

};

} // end namespace stuff

#endif /* INCLUDED_stuff_Math */ 
