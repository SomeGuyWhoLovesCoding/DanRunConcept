// Generated by Haxe 4.3.7
#ifndef INCLUDED_stuff_Map
#define INCLUDED_stuff_Map

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(stuff,Map)

namespace stuff{


class HXCPP_CLASS_ATTRIBUTES Map_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Map_obj OBJ_;
		Map_obj();

	public:
		enum { _hx_ClassId = 0x186b9f08 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="stuff.Map")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"stuff.Map"); }

		inline static ::hx::ObjectPtr< Map_obj > __new() {
			::hx::ObjectPtr< Map_obj > __this = new Map_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Map_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Map_obj *__this = (Map_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Map_obj), false, "stuff.Map"));
			*(void **)__this = Map_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Map_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Map",7c,c2,3a,00); }

		static void __boot();
		static int BOARD_WIDTH;
		static Float MAP_SPEED;
};

} // end namespace stuff

#endif /* INCLUDED_stuff_Map */ 
