// Generated by Haxe 4.3.7
#ifndef INCLUDED_stuff_UtilShit
#define INCLUDED_stuff_UtilShit

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(stuff,UtilShit)

namespace stuff{


class HXCPP_CLASS_ATTRIBUTES UtilShit_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef UtilShit_obj OBJ_;
		UtilShit_obj();

	public:
		enum { _hx_ClassId = 0x1d96b012 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="stuff.UtilShit")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"stuff.UtilShit"); }

		inline static ::hx::ObjectPtr< UtilShit_obj > __new() {
			::hx::ObjectPtr< UtilShit_obj > __this = new UtilShit_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< UtilShit_obj > __alloc(::hx::Ctx *_hx_ctx) {
			UtilShit_obj *__this = (UtilShit_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(UtilShit_obj), false, "stuff.UtilShit"));
			*(void **)__this = UtilShit_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~UtilShit_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("UtilShit",02,39,65,37); }

		static ::cpp::Int64 time();
		static ::Dynamic time_dyn();

		static int level();
		static ::Dynamic level_dyn();

};

} // end namespace stuff

#endif /* INCLUDED_stuff_UtilShit */ 
