// Generated by Haxe 4.3.7
#ifndef INCLUDED_stuff_CookingPanElement
#define INCLUDED_stuff_CookingPanElement

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_stuff_DanRunElement
#include <stuff/DanRunElement.h>
#endif
HX_DECLARE_CLASS1(stuff,CookingPanElement)
HX_DECLARE_CLASS1(stuff,CookingPanRGB)
HX_DECLARE_CLASS1(stuff,DanRunElement)
HX_DECLARE_CLASS1(stuff,Element)

namespace stuff{


class HXCPP_CLASS_ATTRIBUTES CookingPanElement_obj : public  ::stuff::DanRunElement_obj
{
	public:
		typedef  ::stuff::DanRunElement_obj super;
		typedef CookingPanElement_obj OBJ_;
		CookingPanElement_obj();

	public:
		enum { _hx_ClassId = 0x0103c431 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="stuff.CookingPanElement")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"stuff.CookingPanElement"); }
		static ::hx::ObjectPtr< CookingPanElement_obj > __new();
		static ::hx::ObjectPtr< CookingPanElement_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CookingPanElement_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CookingPanElement",79,c2,00,bd); }

		::Array< ::cpp::Int64 > type;
		bool isVanilla;
		 ::stuff::CookingPanRGB colorValues;
		int placementX;
};

} // end namespace stuff

#endif /* INCLUDED_stuff_CookingPanElement */ 
