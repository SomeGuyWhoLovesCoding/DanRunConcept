// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_custom_haxe_Int128Helper
#include <custom/haxe/Int128Helper.h>
#endif
#ifndef INCLUDED_custom_haxe__Int128_Int128_Impl_
#include <custom/haxe/_Int128/Int128_Impl_.h>
#endif
#ifndef INCLUDED_haxe__Int64_Int64_Impl_
#include <haxe/_Int64/Int64_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_38__new,"custom.haxe._Int128.Int128_Impl_","_new",0xa3f4ec35,"custom.haxe._Int128.Int128_Impl_._new","custom/haxe/Int128.hx",38,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_45_copy,"custom.haxe._Int128.Int128_Impl_","copy",0xa69a9289,"custom.haxe._Int128.Int128_Impl_.copy","custom/haxe/Int128.hx",45,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_51_make,"custom.haxe._Int128.Int128_Impl_","make",0xad2c10c2,"custom.haxe._Int128.Int128_Impl_.make","custom/haxe/Int128.hx",51,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_58_ofInt,"custom.haxe._Int128.Int128_Impl_","ofInt",0x03640ec4,"custom.haxe._Int128.Int128_Impl_.ofInt","custom/haxe/Int128.hx",58,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_65_ofInt64,"custom.haxe._Int128.Int128_Impl_","ofInt64",0xaf987702,"custom.haxe._Int128.Int128_Impl_.ofInt64","custom/haxe/Int128.hx",65,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_72_toInt,"custom.haxe._Int128.Int128_Impl_","toInt",0xea57e0e0,"custom.haxe._Int128.Int128_Impl_.toInt","custom/haxe/Int128.hx",72,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_79_toInt64,"custom.haxe._Int128.Int128_Impl_","toInt64",0x18ba081e,"custom.haxe._Int128.Int128_Impl_.toInt64","custom/haxe/Int128.hx",79,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_94_isNeg,"custom.haxe._Int128.Int128_Impl_","isNeg",0x97981d32,"custom.haxe._Int128.Int128_Impl_.isNeg","custom/haxe/Int128.hx",94,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_100_isZero,"custom.haxe._Int128.Int128_Impl_","isZero",0x15700806,"custom.haxe._Int128.Int128_Impl_.isZero","custom/haxe/Int128.hx",100,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_107_compare,"custom.haxe._Int128.Int128_Impl_","compare",0x117e3e51,"custom.haxe._Int128.Int128_Impl_.compare","custom/haxe/Int128.hx",107,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_118_ucompare,"custom.haxe._Int128.Int128_Impl_","ucompare",0x6be311a4,"custom.haxe._Int128.Int128_Impl_.ucompare","custom/haxe/Int128.hx",118,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_127_toStr,"custom.haxe._Int128.Int128_Impl_","toStr",0xea5f7ca2,"custom.haxe._Int128.Int128_Impl_.toStr","custom/haxe/Int128.hx",127,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_129_toString,"custom.haxe._Int128.Int128_Impl_","toString",0xfcdaa180,"custom.haxe._Int128.Int128_Impl_.toString","custom/haxe/Int128.hx",129,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_166_parseString,"custom.haxe._Int128.Int128_Impl_","parseString",0x25644110,"custom.haxe._Int128.Int128_Impl_.parseString","custom/haxe/Int128.hx",166,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_170_fromFloat,"custom.haxe._Int128.Int128_Impl_","fromFloat",0xd10a987e,"custom.haxe._Int128.Int128_Impl_.fromFloat","custom/haxe/Int128.hx",170,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_177_divMod,"custom.haxe._Int128.Int128_Impl_","divMod",0x66152dc5,"custom.haxe._Int128.Int128_Impl_.divMod","custom/haxe/Int128.hx",177,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_226_neg,"custom.haxe._Int128.Int128_Impl_","neg",0xffa1affc,"custom.haxe._Int128.Int128_Impl_.neg","custom/haxe/Int128.hx",226,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_234_preIncrement,"custom.haxe._Int128.Int128_Impl_","preIncrement",0x1785b460,"custom.haxe._Int128.Int128_Impl_.preIncrement","custom/haxe/Int128.hx",234,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_242_postIncrement,"custom.haxe._Int128.Int128_Impl_","postIncrement",0x361c845b,"custom.haxe._Int128.Int128_Impl_.postIncrement","custom/haxe/Int128.hx",242,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_248_preDecrement,"custom.haxe._Int128.Int128_Impl_","preDecrement",0xf608a444,"custom.haxe._Int128.Int128_Impl_.preDecrement","custom/haxe/Int128.hx",248,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_256_postDecrement,"custom.haxe._Int128.Int128_Impl_","postDecrement",0x149f743f,"custom.haxe._Int128.Int128_Impl_.postDecrement","custom/haxe/Int128.hx",256,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_265_add,"custom.haxe._Int128.Int128_Impl_","add",0xff97d1cd,"custom.haxe._Int128.Int128_Impl_.add","custom/haxe/Int128.hx",265,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_274_addInt,"custom.haxe._Int128.Int128_Impl_","addInt",0x46195122,"custom.haxe._Int128.Int128_Impl_.addInt","custom/haxe/Int128.hx",274,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_277_addInt64,"custom.haxe._Int128.Int128_Impl_","addInt64",0xfbe98ce0,"custom.haxe._Int128.Int128_Impl_.addInt64","custom/haxe/Int128.hx",277,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_280_intAdd,"custom.haxe._Int128.Int128_Impl_","intAdd",0x45835046,"custom.haxe._Int128.Int128_Impl_.intAdd","custom/haxe/Int128.hx",280,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_283_int64Add,"custom.haxe._Int128.Int128_Impl_","int64Add",0xb3ef9708,"custom.haxe._Int128.Int128_Impl_.int64Add","custom/haxe/Int128.hx",283,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_288_sub,"custom.haxe._Int128.Int128_Impl_","sub",0xffa5892c,"custom.haxe._Int128.Int128_Impl_.sub","custom/haxe/Int128.hx",288,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_297_subInt,"custom.haxe._Int128.Int128_Impl_","subInt",0x41033f23,"custom.haxe._Int128.Int128_Impl_.subInt","custom/haxe/Int128.hx",297,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_300_subInt64,"custom.haxe._Int128.Int128_Impl_","subInt64",0xf7abbd21,"custom.haxe._Int128.Int128_Impl_.subInt64","custom/haxe/Int128.hx",300,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_303_intSub,"custom.haxe._Int128.Int128_Impl_","intSub",0x459107a5,"custom.haxe._Int128.Int128_Impl_.intSub","custom/haxe/Int128.hx",303,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_306_int64Sub,"custom.haxe._Int128.Int128_Impl_","int64Sub",0xb3fd4e67,"custom.haxe._Int128.Int128_Impl_.int64Sub","custom/haxe/Int128.hx",306,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_312_mul,"custom.haxe._Int128.Int128_Impl_","mul",0xffa0fbb0,"custom.haxe._Int128.Int128_Impl_.mul","custom/haxe/Int128.hx",312,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_335_mulInt,"custom.haxe._Int128.Int128_Impl_","mulInt",0xe17b371f,"custom.haxe._Int128.Int128_Impl_.mulInt","custom/haxe/Int128.hx",335,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_338_mulInt64,"custom.haxe._Int128.Int128_Impl_","mulInt64",0xa00eac1d,"custom.haxe._Int128.Int128_Impl_.mulInt64","custom/haxe/Int128.hx",338,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_341_intMul,"custom.haxe._Int128.Int128_Impl_","intMul",0x458c7a29,"custom.haxe._Int128.Int128_Impl_.intMul","custom/haxe/Int128.hx",341,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_344_int64Mul,"custom.haxe._Int128.Int128_Impl_","int64Mul",0xb3f8c0eb,"custom.haxe._Int128.Int128_Impl_.int64Mul","custom/haxe/Int128.hx",344,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_350_div,"custom.haxe._Int128.Int128_Impl_","div",0xff9a1cfd,"custom.haxe._Int128.Int128_Impl_.div","custom/haxe/Int128.hx",350,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_353_divInt,"custom.haxe._Int128.Int128_Impl_","divInt",0x661223f2,"custom.haxe._Int128.Int128_Impl_.divInt","custom/haxe/Int128.hx",353,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_356_divInt64,"custom.haxe._Int128.Int128_Impl_","divInt64",0xa9d8b3b0,"custom.haxe._Int128.Int128_Impl_.divInt64","custom/haxe/Int128.hx",356,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_359_intDiv,"custom.haxe._Int128.Int128_Impl_","intDiv",0x45859b76,"custom.haxe._Int128.Int128_Impl_.intDiv","custom/haxe/Int128.hx",359,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_362_int64Div,"custom.haxe._Int128.Int128_Impl_","int64Div",0xb3f1e238,"custom.haxe._Int128.Int128_Impl_.int64Div","custom/haxe/Int128.hx",362,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_368_mod,"custom.haxe._Int128.Int128_Impl_","mod",0xffa0f66e,"custom.haxe._Int128.Int128_Impl_.mod","custom/haxe/Int128.hx",368,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_371_modInt,"custom.haxe._Int128.Int128_Impl_","modInt",0x67ca0721,"custom.haxe._Int128.Int128_Impl_.modInt","custom/haxe/Int128.hx",371,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_374_modInt64,"custom.haxe._Int128.Int128_Impl_","modInt64",0x73b3009f,"custom.haxe._Int128.Int128_Impl_.modInt64","custom/haxe/Int128.hx",374,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_377_intMod,"custom.haxe._Int128.Int128_Impl_","intMod",0x458c74e7,"custom.haxe._Int128.Int128_Impl_.intMod","custom/haxe/Int128.hx",377,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_380_int64Mod,"custom.haxe._Int128.Int128_Impl_","int64Mod",0xb3f8bba9,"custom.haxe._Int128.Int128_Impl_.int64Mod","custom/haxe/Int128.hx",380,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_386_eq,"custom.haxe._Int128.Int128_Impl_","eq",0x7ad51240,"custom.haxe._Int128.Int128_Impl_.eq","custom/haxe/Int128.hx",386,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_389_eqInt,"custom.haxe._Int128.Int128_Impl_","eqInt",0x48a79a8f,"custom.haxe._Int128.Int128_Impl_.eqInt","custom/haxe/Int128.hx",389,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_392_eqInt64,"custom.haxe._Int128.Int128_Impl_","eqInt64",0x75aecb8d,"custom.haxe._Int128.Int128_Impl_.eqInt64","custom/haxe/Int128.hx",392,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_398_neq,"custom.haxe._Int128.Int128_Impl_","neq",0xffa1b006,"custom.haxe._Int128.Int128_Impl_.neq","custom/haxe/Int128.hx",398,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_401_neqInt,"custom.haxe._Int128.Int128_Impl_","neqInt",0x14bb5c89,"custom.haxe._Int128.Int128_Impl_.neqInt","custom/haxe/Int128.hx",401,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_404_neqInt64,"custom.haxe._Int128.Int128_Impl_","neqInt64",0x3fb28007,"custom.haxe._Int128.Int128_Impl_.neqInt64","custom/haxe/Int128.hx",404,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_407_lt,"custom.haxe._Int128.Int128_Impl_","lt",0x7ad5185c,"custom.haxe._Int128.Int128_Impl_.lt","custom/haxe/Int128.hx",407,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_410_ltInt,"custom.haxe._Int128.Int128_Impl_","ltInt",0x52714df3,"custom.haxe._Int128.Int128_Impl_.ltInt","custom/haxe/Int128.hx",410,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_413_ltInt64,"custom.haxe._Int128.Int128_Impl_","ltInt64",0xcbd71ff1,"custom.haxe._Int128.Int128_Impl_.ltInt64","custom/haxe/Int128.hx",413,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_416_lte,"custom.haxe._Int128.Int128_Impl_","lte",0xffa03889,"custom.haxe._Int128.Int128_Impl_.lte","custom/haxe/Int128.hx",416,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_419_lteInt,"custom.haxe._Int128.Int128_Impl_","lteInt",0xe318c7e6,"custom.haxe._Int128.Int128_Impl_.lteInt","custom/haxe/Int128.hx",419,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_422_lteInt64,"custom.haxe._Int128.Int128_Impl_","lteInt64",0x70c73ca4,"custom.haxe._Int128.Int128_Impl_.lteInt64","custom/haxe/Int128.hx",422,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_425_gt,"custom.haxe._Int128.Int128_Impl_","gt",0x7ad51401,"custom.haxe._Int128.Int128_Impl_.gt","custom/haxe/Int128.hx",425,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_428_gtInt,"custom.haxe._Int128.Int128_Impl_","gtInt",0x7170676e,"custom.haxe._Int128.Int128_Impl_.gtInt","custom/haxe/Int128.hx",428,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_431_gtInt64,"custom.haxe._Int128.Int128_Impl_","gtInt64",0xfbebce2c,"custom.haxe._Int128.Int128_Impl_.gtInt64","custom/haxe/Int128.hx",431,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_434_gte,"custom.haxe._Int128.Int128_Impl_","gte",0xff9c6d44,"custom.haxe._Int128.Int128_Impl_.gte","custom/haxe/Int128.hx",434,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_437_gteInt,"custom.haxe._Int128.Int128_Impl_","gteInt",0xe34ffa0b,"custom.haxe._Int128.Int128_Impl_.gteInt","custom/haxe/Int128.hx",437,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_440_gteInt64,"custom.haxe._Int128.Int128_Impl_","gteInt64",0x52cb0209,"custom.haxe._Int128.Int128_Impl_.gteInt64","custom/haxe/Int128.hx",440,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_446_complement,"custom.haxe._Int128.Int128_Impl_","complement",0x9154f0ba,"custom.haxe._Int128.Int128_Impl_.complement","custom/haxe/Int128.hx",446,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_452_and,"custom.haxe._Int128.Int128_Impl_","and",0xff97da83,"custom.haxe._Int128.Int128_Impl_.and","custom/haxe/Int128.hx",452,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_458_or,"custom.haxe._Int128.Int128_Impl_","or",0x7ad51af7,"custom.haxe._Int128.Int128_Impl_.or","custom/haxe/Int128.hx",458,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_464_xor,"custom.haxe._Int128.Int128_Impl_","xor",0xffa94f47,"custom.haxe._Int128.Int128_Impl_.xor","custom/haxe/Int128.hx",464,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_469_shl,"custom.haxe._Int128.Int128_Impl_","shl",0xffa57de3,"custom.haxe._Int128.Int128_Impl_.shl","custom/haxe/Int128.hx",469,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_478_shr,"custom.haxe._Int128.Int128_Impl_","shr",0xffa57de9,"custom.haxe._Int128.Int128_Impl_.shr","custom/haxe/Int128.hx",478,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_487_ushr,"custom.haxe._Int128.Int128_Impl_","ushr",0xb2836bbc,"custom.haxe._Int128.Int128_Impl_.ushr","custom/haxe/Int128.hx",487,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_495_get_high,"custom.haxe._Int128.Int128_Impl_","get_high",0x8934c3bf,"custom.haxe._Int128.Int128_Impl_.get_high","custom/haxe/Int128.hx",495,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_498_set_high,"custom.haxe._Int128.Int128_Impl_","set_high",0x37921d33,"custom.haxe._Int128.Int128_Impl_.set_high","custom/haxe/Int128.hx",498,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_503_get_low,"custom.haxe._Int128.Int128_Impl_","get_low",0xb4dc42d7,"custom.haxe._Int128.Int128_Impl_.get_low","custom/haxe/Int128.hx",503,0x2147ec6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1883cd023f8a821a_506_set_low,"custom.haxe._Int128.Int128_Impl_","set_low",0xa7ddd3e3,"custom.haxe._Int128.Int128_Impl_.set_low","custom/haxe/Int128.hx",506,0x2147ec6b)
namespace custom{
namespace haxe{
namespace _Int128{

void Int128_Impl__obj::__construct() { }

Dynamic Int128_Impl__obj::__CreateEmpty() { return new Int128_Impl__obj; }

void *Int128_Impl__obj::_hx_vtable = 0;

Dynamic Int128_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Int128_Impl__obj > _hx_result = new Int128_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Int128_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6202aff4;
}

::Array< ::cpp::Int64 > Int128_Impl__obj::_new(::Array< ::cpp::Int64 > x){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_38__new)
HXDLIN(  38)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,_new,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::copy(::Array< ::cpp::Int64 > this1){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_45_copy)
HXDLIN(  45)		::cpp::Int64 _hx_tmp = ( (::cpp::Int64)(_hx_array_unsafe_get(this1,0)) );
HXDLIN(  45)		return ::custom::haxe::_Int128::Int128_Impl__obj::make(_hx_tmp,( (::cpp::Int64)(_hx_array_unsafe_get(this1,1)) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,copy,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::make(::cpp::Int64 high,::cpp::Int64 low){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_51_make)
HXDLIN(  51)		return ::Array_obj< ::cpp::Int64 >::__new(2)->init(0,high)->init(1,low);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,make,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::ofInt(int x){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_58_ofInt)
HXDLIN(  58)		return ::custom::haxe::_Int128::Int128_Impl__obj::make(( (::cpp::Int64)((x >> 31)) ),( (::cpp::Int64)(x) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,ofInt,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::ofInt64(::cpp::Int64 x){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_65_ofInt64)
HXDLIN(  65)		return ::custom::haxe::_Int128::Int128_Impl__obj::make(_hx_int64_shr(x,63),x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,ofInt64,return )

int Int128_Impl__obj::toInt(::Array< ::cpp::Int64 > x){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_72_toInt)
HXDLIN(  72)		::cpp::Int64 x1 = ( (::cpp::Int64)(_hx_array_unsafe_get(x,1)) );
HXDLIN(  72)		int _hx_tmp = _hx_int64_high(x1);
HXDLIN(  72)		if ((_hx_tmp != (_hx_int64_low(x1) >> 31))) {
HXDLIN(  72)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  72)		return _hx_int64_low(x1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,toInt,return )

::cpp::Int64 Int128_Impl__obj::toInt64(::Array< ::cpp::Int64 > x){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_79_toInt64)
HXLINE(  80)		::cpp::Int64 res = ( (::cpp::Int64)(_hx_array_unsafe_get(x,1)) );
HXLINE(  84)		bool _hx_tmp;
HXDLIN(  84)		bool _hx_tmp1;
HXDLIN(  84)		if (!(::custom::haxe::_Int128::Int128_Impl__obj::isNeg(x))) {
HXLINE(  84)			_hx_tmp1 = ::custom::haxe::_Int128::Int128_Impl__obj::isNeg(::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(res));
            		}
            		else {
HXLINE(  84)			_hx_tmp1 = false;
            		}
HXDLIN(  84)		if (!(_hx_tmp1)) {
HXLINE(  84)			::cpp::Int64 a = ( (::cpp::Int64)(_hx_array_unsafe_get(x,0)) );
HXDLIN(  84)			_hx_tmp = _hx_int64_neq(a,_hx_int64_shr(( (::cpp::Int64)(_hx_array_unsafe_get(x,1)) ),63));
            		}
            		else {
HXLINE(  84)			_hx_tmp = true;
            		}
HXDLIN(  84)		if (_hx_tmp) {
HXLINE(  85)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXLINE(  87)		return res;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,toInt64,return )

bool Int128_Impl__obj::isNeg(::Array< ::cpp::Int64 > x){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_94_isNeg)
HXDLIN(  94)		if ((_hx_int64_compare(( (::cpp::Int64)(_hx_array_unsafe_get(x,0)) ),( (::cpp::Int64)(0) )) < 0)) {
HXDLIN(  94)			return (_hx_int64_high(( (::cpp::Int64)(_hx_array_unsafe_get(x,0)) )) < 0);
            		}
            		else {
HXDLIN(  94)			return false;
            		}
HXDLIN(  94)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,isNeg,return )

bool Int128_Impl__obj::isZero(::Array< ::cpp::Int64 > x){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_100_isZero)
HXDLIN( 100)		return ::custom::haxe::_Int128::Int128_Impl__obj::eq(x,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,isZero,return )

::cpp::Int64 Int128_Impl__obj::compare(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_107_compare)
HXLINE( 108)		::cpp::Int64 a1 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) );
HXDLIN( 108)		::cpp::Int64 v = _hx_int64_sub(a1,( (::cpp::Int64)(_hx_array_unsafe_get(b,0)) ));
HXLINE( 109)		if (!(_hx_int64_neq(v,( (::cpp::Int64)(0) )))) {
HXLINE( 109)			::cpp::Int64 a2 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) );
HXDLIN( 109)			v = ( (::cpp::Int64)(_hx_int64_ucompare(a2,( (::cpp::Int64)(_hx_array_unsafe_get(b,1)) ))) );
            		}
HXLINE( 110)		if ((_hx_int64_compare(( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) ),( (::cpp::Int64)(0) )) < 0)) {
HXLINE( 110)			if ((_hx_int64_compare(( (::cpp::Int64)(_hx_array_unsafe_get(b,0)) ),( (::cpp::Int64)(0) )) < 0)) {
HXLINE( 110)				return v;
            			}
            			else {
HXLINE( 110)				return ( (::cpp::Int64)(-1) );
            			}
            		}
            		else {
HXLINE( 110)			if ((_hx_int64_compare(( (::cpp::Int64)(_hx_array_unsafe_get(b,0)) ),( (::cpp::Int64)(0) )) >= 0)) {
HXLINE( 110)				return v;
            			}
            			else {
HXLINE( 110)				return ( (::cpp::Int64)(1) );
            			}
            		}
HXDLIN( 110)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,compare,return )

::cpp::Int64 Int128_Impl__obj::ucompare(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_118_ucompare)
HXLINE( 119)		::cpp::Int64 a1 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) );
HXDLIN( 119)		int v = _hx_int64_ucompare(a1,( (::cpp::Int64)(_hx_array_unsafe_get(b,0)) ));
HXLINE( 120)		if ((v != 0)) {
HXLINE( 120)			return ( (::cpp::Int64)(v) );
            		}
            		else {
HXLINE( 120)			::cpp::Int64 a2 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) );
HXDLIN( 120)			return ( (::cpp::Int64)(_hx_int64_ucompare(a2,( (::cpp::Int64)(_hx_array_unsafe_get(b,1)) ))) );
            		}
HXDLIN( 120)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,ucompare,return )

::String Int128_Impl__obj::toStr(::Array< ::cpp::Int64 > x){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_127_toStr)
HXDLIN( 127)		return ::custom::haxe::_Int128::Int128_Impl__obj::toString(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,toStr,return )

::String Int128_Impl__obj::toString(::Array< ::cpp::Int64 > this1){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_129_toString)
HXLINE( 130)		::Array< ::cpp::Int64 > i = this1;
HXLINE( 131)		::String str = HX_("",00,00,00,00);
HXLINE( 133)		if (::custom::haxe::_Int128::Int128_Impl__obj::eq(i,::custom::haxe::Int128Helper_obj::minValue)) {
HXLINE( 134)			return HX_("-170141183460469231731687303715884105728",ea,15,b0,af);
            		}
HXLINE( 137)		bool sign = ::custom::haxe::_Int128::Int128_Impl__obj::isNeg(i);
HXLINE( 139)		if (sign) {
HXLINE( 140)			i = ::custom::haxe::_Int128::Int128_Impl__obj::neg(i);
            		}
HXLINE( 143)		 ::Dynamic i1 = null();
HXLINE( 145)		i1 = ::custom::haxe::_Int128::Int128_Impl__obj::divMod(i,::custom::haxe::Int128Helper_obj::QUINTILLION);
HXLINE( 147)		str = (( (::String)(::custom::haxe::_Int128::Int128_Impl__obj::toInt64(( (::Array< ::cpp::Int64 >)(i1->__Field(HX_("modulus",37,f0,fa,f7),::hx::paccDynamic)) ))) ) + str);
HXLINE( 149)		if (::custom::haxe::_Int128::Int128_Impl__obj::gt(i,::custom::haxe::Int128Helper_obj::QUINTILLION)) {
HXLINE( 150)			i1 = ::custom::haxe::_Int128::Int128_Impl__obj::divMod(( (::Array< ::cpp::Int64 >)(i1->__Field(HX_("quotient",ab,68,60,b2),::hx::paccDynamic)) ),::custom::haxe::Int128Helper_obj::QUINTILLION);
HXLINE( 151)			str = (( (::String)(::custom::haxe::_Int128::Int128_Impl__obj::toInt64(( (::Array< ::cpp::Int64 >)(i1->__Field(HX_("modulus",37,f0,fa,f7),::hx::paccDynamic)) ))) ) + str);
HXLINE( 153)			if (::custom::haxe::_Int128::Int128_Impl__obj::gt(i,::custom::haxe::Int128Helper_obj::UNDECILLION)) {
HXLINE( 154)				::cpp::Int64 this2 = ( (::cpp::Int64)(_hx_array_unsafe_get(( (::Array< ::cpp::Int64 >)(i1->__Field(HX_("quotient",ab,68,60,b2),::hx::paccDynamic)) ),1)) );
HXDLIN( 154)				str = (::Std_obj::string(_hx_int64_low(( (::cpp::Int64)(::haxe::_Int64::Int64_Impl__obj::divMod(this2,( (::cpp::Int64)(_hx_array_unsafe_get(::custom::haxe::Int128Helper_obj::QUINTILLION,1)) ))->__Field(HX_("modulus",37,f0,fa,f7),::hx::paccDynamic)) ))) + str);
            			}
            		}
HXLINE( 158)		if (sign) {
HXLINE( 159)			str = (HX_("-",2d,00,00,00) + str);
            		}
HXLINE( 162)		return str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,toString,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::parseString(::String sParam){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_166_parseString)
HXDLIN( 166)		return ::custom::haxe::Int128Helper_obj::parseString(sParam);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,parseString,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::fromFloat(Float f){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_170_fromFloat)
HXDLIN( 170)		return ::custom::haxe::Int128Helper_obj::fromFloat(f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,fromFloat,return )

 ::Dynamic Int128_Impl__obj::divMod(::Array< ::cpp::Int64 > dividend,::Array< ::cpp::Int64 > divisor){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_177_divMod)
HXLINE( 179)		if (_hx_int64_eq(( (::cpp::Int64)(_hx_array_unsafe_get(divisor,0)) ),( (::cpp::Int64)(0) ))) {
HXLINE( 180)			if (_hx_int64_eq(( (::cpp::Int64)(_hx_array_unsafe_get(divisor,1)) ),( (::cpp::Int64)(0) ))) {
HXLINE( 181)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
            			else {
HXLINE( 182)				if (_hx_int64_eq(( (::cpp::Int64)(_hx_array_unsafe_get(divisor,1)) ),( (::cpp::Int64)(1) ))) {
HXLINE( 183)					::cpp::Int64 _hx_tmp = ( (::cpp::Int64)(_hx_array_unsafe_get(dividend,0)) );
HXDLIN( 183)					::Array< ::cpp::Int64 > _hx_tmp1 = ::custom::haxe::_Int128::Int128_Impl__obj::make(_hx_tmp,( (::cpp::Int64)(_hx_array_unsafe_get(dividend,1)) ));
HXDLIN( 183)					return  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("quotient",ab,68,60,b2),_hx_tmp1)
            						->setFixed(1,HX_("modulus",37,f0,fa,f7),::custom::haxe::_Int128::Int128_Impl__obj::ofInt(0)));
            				}
            			}
            		}
HXLINE( 187)		bool divSign = ::custom::haxe::_Int128::Int128_Impl__obj::isNeg(dividend);
HXDLIN( 187)		bool divSign1 = (divSign != ::custom::haxe::_Int128::Int128_Impl__obj::isNeg(divisor));
HXLINE( 189)		::Array< ::cpp::Int64 > modulus;
HXDLIN( 189)		if (::custom::haxe::_Int128::Int128_Impl__obj::isNeg(dividend)) {
HXLINE( 189)			modulus = ::custom::haxe::_Int128::Int128_Impl__obj::neg(dividend);
            		}
            		else {
HXLINE( 189)			::cpp::Int64 modulus1 = ( (::cpp::Int64)(_hx_array_unsafe_get(dividend,0)) );
HXDLIN( 189)			modulus = ::custom::haxe::_Int128::Int128_Impl__obj::make(modulus1,( (::cpp::Int64)(_hx_array_unsafe_get(dividend,1)) ));
            		}
HXLINE( 190)		if (::custom::haxe::_Int128::Int128_Impl__obj::isNeg(divisor)) {
HXLINE( 190)			divisor = ::custom::haxe::_Int128::Int128_Impl__obj::neg(divisor);
            		}
HXLINE( 192)		::Array< ::cpp::Int64 > quotient = ::custom::haxe::_Int128::Int128_Impl__obj::ofInt(0);
HXLINE( 193)		::Array< ::cpp::Int64 > mask = ::custom::haxe::_Int128::Int128_Impl__obj::ofInt(1);
HXLINE( 195)		while(!(::custom::haxe::_Int128::Int128_Impl__obj::isNeg(divisor))){
HXLINE( 196)			::cpp::Int64 cmp = ::custom::haxe::_Int128::Int128_Impl__obj::ucompare(divisor,modulus);
HXLINE( 197)			divisor = ::custom::haxe::_Int128::Int128_Impl__obj::shl(divisor,1);
HXLINE( 198)			mask = ::custom::haxe::_Int128::Int128_Impl__obj::shl(mask,1);
HXLINE( 199)			if ((_hx_int64_compare(cmp,( (::cpp::Int64)(0) )) >= 0)) {
HXLINE( 200)				goto _hx_goto_15;
            			}
            		}
            		_hx_goto_15:;
HXLINE( 203)		while(::custom::haxe::_Int128::Int128_Impl__obj::neq(mask,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(0))){
HXLINE( 204)			if ((_hx_int64_compare(::custom::haxe::_Int128::Int128_Impl__obj::ucompare(modulus,divisor),( (::cpp::Int64)(0) )) >= 0)) {
HXLINE( 205)				quotient = ::custom::haxe::_Int128::Int128_Impl__obj::_hx_or(quotient,mask);
HXLINE( 206)				modulus = ::custom::haxe::_Int128::Int128_Impl__obj::sub(modulus,divisor);
            			}
HXLINE( 208)			mask = ::custom::haxe::_Int128::Int128_Impl__obj::ushr(mask,1);
HXLINE( 209)			divisor = ::custom::haxe::_Int128::Int128_Impl__obj::ushr(divisor,1);
            		}
HXLINE( 212)		if (divSign1) {
HXLINE( 213)			quotient = ::custom::haxe::_Int128::Int128_Impl__obj::neg(quotient);
            		}
HXLINE( 214)		if (::custom::haxe::_Int128::Int128_Impl__obj::isNeg(dividend)) {
HXLINE( 215)			modulus = ::custom::haxe::_Int128::Int128_Impl__obj::neg(modulus);
            		}
HXLINE( 217)		return  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("quotient",ab,68,60,b2),quotient)
            			->setFixed(1,HX_("modulus",37,f0,fa,f7),modulus));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,divMod,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::neg(::Array< ::cpp::Int64 > x){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_226_neg)
HXLINE( 227)		::cpp::Int64 high = _hx_int64_complement(( (::cpp::Int64)(_hx_array_unsafe_get(x,0)) ));
HXLINE( 228)		::cpp::Int64 low = _hx_int64_neg(( (::cpp::Int64)(_hx_array_unsafe_get(x,1)) ));
HXLINE( 229)		if (_hx_int64_eq(low,( (::cpp::Int64)(0) ))) {
HXLINE( 230)			_hx_int64_post_increment(high);
            		}
HXLINE( 231)		return ::custom::haxe::_Int128::Int128_Impl__obj::make(high,low);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,neg,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::preIncrement(::Array< ::cpp::Int64 > this1){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_234_preIncrement)
HXLINE( 235)		::cpp::Int64 this2 = ( (::cpp::Int64)(_hx_array_unsafe_get(this1,0)) );
HXDLIN( 235)		this1 = ::custom::haxe::_Int128::Int128_Impl__obj::make(this2,( (::cpp::Int64)(_hx_array_unsafe_get(this1,1)) ));
HXLINE( 236)		{
HXLINE( 236)			::cpp::Int64 value = (( (::cpp::Int64)(_hx_array_unsafe_get(this1,1)) ) + 1);
HXDLIN( 236)			this1->__unsafe_set(1,value);
            		}
HXLINE( 237)		if (_hx_int64_eq(( (::cpp::Int64)(_hx_array_unsafe_get(this1,1)) ),( (::cpp::Int64)(0) ))) {
HXLINE( 238)			::cpp::Int64 value1 = (( (::cpp::Int64)(_hx_array_unsafe_get(this1,0)) ) + 1);
HXDLIN( 238)			this1->__unsafe_set(0,value1);
            		}
HXLINE( 239)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,preIncrement,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::postIncrement(::Array< ::cpp::Int64 > this1){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_242_postIncrement)
HXLINE( 243)		::Array< ::cpp::Int64 > ret = this1;
HXLINE( 244)		{
HXLINE( 244)			::cpp::Int64 this2 = ( (::cpp::Int64)(_hx_array_unsafe_get(this1,0)) );
HXDLIN( 244)			this1 = ::custom::haxe::_Int128::Int128_Impl__obj::make(this2,( (::cpp::Int64)(_hx_array_unsafe_get(this1,1)) ));
HXDLIN( 244)			{
HXLINE( 244)				::cpp::Int64 value = (( (::cpp::Int64)(_hx_array_unsafe_get(this1,1)) ) + 1);
HXDLIN( 244)				this1->__unsafe_set(1,value);
            			}
HXDLIN( 244)			if (_hx_int64_eq(( (::cpp::Int64)(_hx_array_unsafe_get(this1,1)) ),( (::cpp::Int64)(0) ))) {
HXLINE( 244)				::cpp::Int64 value1 = (( (::cpp::Int64)(_hx_array_unsafe_get(this1,0)) ) + 1);
HXDLIN( 244)				this1->__unsafe_set(0,value1);
            			}
            		}
HXLINE( 245)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,postIncrement,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::preDecrement(::Array< ::cpp::Int64 > this1){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_248_preDecrement)
HXLINE( 249)		::cpp::Int64 this2 = ( (::cpp::Int64)(_hx_array_unsafe_get(this1,0)) );
HXDLIN( 249)		this1 = ::custom::haxe::_Int128::Int128_Impl__obj::make(this2,( (::cpp::Int64)(_hx_array_unsafe_get(this1,1)) ));
HXLINE( 250)		if (_hx_int64_eq(( (::cpp::Int64)(_hx_array_unsafe_get(this1,1)) ),( (::cpp::Int64)(0) ))) {
HXLINE( 251)			::cpp::Int64 value = (( (::cpp::Int64)(_hx_array_unsafe_get(this1,0)) ) - ( (::cpp::Int64)(1) ));
HXDLIN( 251)			this1->__unsafe_set(0,value);
            		}
HXLINE( 252)		{
HXLINE( 252)			::cpp::Int64 value1 = (( (::cpp::Int64)(_hx_array_unsafe_get(this1,1)) ) - ( (::cpp::Int64)(1) ));
HXDLIN( 252)			this1->__unsafe_set(1,value1);
            		}
HXLINE( 253)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,preDecrement,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::postDecrement(::Array< ::cpp::Int64 > this1){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_256_postDecrement)
HXLINE( 257)		::Array< ::cpp::Int64 > ret = this1;
HXLINE( 258)		{
HXLINE( 258)			::cpp::Int64 this2 = ( (::cpp::Int64)(_hx_array_unsafe_get(this1,0)) );
HXDLIN( 258)			this1 = ::custom::haxe::_Int128::Int128_Impl__obj::make(this2,( (::cpp::Int64)(_hx_array_unsafe_get(this1,1)) ));
HXDLIN( 258)			if (_hx_int64_eq(( (::cpp::Int64)(_hx_array_unsafe_get(this1,1)) ),( (::cpp::Int64)(0) ))) {
HXLINE( 258)				::cpp::Int64 value = (( (::cpp::Int64)(_hx_array_unsafe_get(this1,0)) ) - ( (::cpp::Int64)(1) ));
HXDLIN( 258)				this1->__unsafe_set(0,value);
            			}
HXDLIN( 258)			{
HXLINE( 258)				::cpp::Int64 value1 = (( (::cpp::Int64)(_hx_array_unsafe_get(this1,1)) ) - ( (::cpp::Int64)(1) ));
HXDLIN( 258)				this1->__unsafe_set(1,value1);
            			}
            		}
HXLINE( 259)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,postDecrement,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::add(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_265_add)
HXLINE( 266)		::cpp::Int64 a1 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) );
HXDLIN( 266)		::cpp::Int64 high = _hx_int64_add(a1,( (::cpp::Int64)(_hx_array_unsafe_get(b,0)) ));
HXLINE( 267)		::cpp::Int64 a2 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) );
HXDLIN( 267)		::cpp::Int64 low = _hx_int64_add(a2,( (::cpp::Int64)(_hx_array_unsafe_get(b,1)) ));
HXLINE( 268)		if ((_hx_int64_ucompare(low,( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) )) < 0)) {
HXLINE( 269)			_hx_int64_post_increment(high);
            		}
HXLINE( 270)		return ::custom::haxe::_Int128::Int128_Impl__obj::make(high,low);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,add,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::addInt(::Array< ::cpp::Int64 > a,int b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_274_addInt)
HXDLIN( 274)		return ::custom::haxe::_Int128::Int128_Impl__obj::add(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,addInt,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::addInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_277_addInt64)
HXDLIN( 277)		return ::custom::haxe::_Int128::Int128_Impl__obj::add(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,addInt64,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::intAdd(int a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_280_intAdd)
HXDLIN( 280)		return ::custom::haxe::_Int128::Int128_Impl__obj::add(::custom::haxe::_Int128::Int128_Impl__obj::ofInt(a),b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,intAdd,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::int64Add(::cpp::Int64 a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_283_int64Add)
HXDLIN( 283)		return ::custom::haxe::_Int128::Int128_Impl__obj::add(::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(a),b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,int64Add,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::sub(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_288_sub)
HXLINE( 289)		::cpp::Int64 a1 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) );
HXDLIN( 289)		::cpp::Int64 high = _hx_int64_sub(a1,( (::cpp::Int64)(_hx_array_unsafe_get(b,0)) ));
HXLINE( 290)		::cpp::Int64 a2 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) );
HXDLIN( 290)		::cpp::Int64 low = _hx_int64_sub(a2,( (::cpp::Int64)(_hx_array_unsafe_get(b,1)) ));
HXLINE( 291)		::cpp::Int64 a3 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) );
HXDLIN( 291)		if ((_hx_int64_ucompare(a3,( (::cpp::Int64)(_hx_array_unsafe_get(b,1)) )) < 0)) {
HXLINE( 292)			_hx_int64_post_decrement(high);
            		}
HXLINE( 293)		return ::custom::haxe::_Int128::Int128_Impl__obj::make(high,low);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,sub,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::subInt(::Array< ::cpp::Int64 > a,int b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_297_subInt)
HXDLIN( 297)		return ::custom::haxe::_Int128::Int128_Impl__obj::sub(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,subInt,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::subInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_300_subInt64)
HXDLIN( 300)		return ::custom::haxe::_Int128::Int128_Impl__obj::sub(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,subInt64,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::intSub(int a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_303_intSub)
HXDLIN( 303)		return ::custom::haxe::_Int128::Int128_Impl__obj::sub(::custom::haxe::_Int128::Int128_Impl__obj::ofInt(a),b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,intSub,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::int64Sub(::cpp::Int64 a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_306_int64Sub)
HXDLIN( 306)		return ::custom::haxe::_Int128::Int128_Impl__obj::sub(::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(a),b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,int64Sub,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::mul(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_312_mul)
HXLINE( 313)		::cpp::Int64 mask = ( (::cpp::Int64)(_hx_array_unsafe_get(::custom::haxe::Int128Helper_obj::maxValue32U,1)) );
HXLINE( 314)		::cpp::Int64 aLow = _hx_int64_and(( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) ),mask);
HXDLIN( 314)		::cpp::Int64 aHigh = _hx_int64_ushr(( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) ),32);
HXLINE( 315)		::cpp::Int64 bLow = _hx_int64_and(( (::cpp::Int64)(_hx_array_unsafe_get(b,1)) ),mask);
HXDLIN( 315)		::cpp::Int64 bHigh = _hx_int64_ushr(( (::cpp::Int64)(_hx_array_unsafe_get(b,1)) ),32);
HXLINE( 316)		::cpp::Int64 part00 = _hx_int64_mul(aLow,bLow);
HXLINE( 317)		::cpp::Int64 part10 = _hx_int64_mul(aHigh,bLow);
HXLINE( 318)		::cpp::Int64 part01 = _hx_int64_mul(aLow,bHigh);
HXLINE( 319)		::cpp::Int64 part11 = _hx_int64_mul(aHigh,bHigh);
HXLINE( 320)		::cpp::Int64 low = part00;
HXLINE( 321)		::cpp::Int64 a1 = _hx_int64_add(part11,_hx_int64_ushr(part01,32));
HXDLIN( 321)		::cpp::Int64 high = _hx_int64_add(a1,_hx_int64_ushr(part10,32));
HXLINE( 322)		part01 = _hx_int64_shl(part01,32);
HXLINE( 323)		low = _hx_int64_add(low,part01);
HXLINE( 324)		if ((_hx_int64_ucompare(low,part01) < 0)) {
HXLINE( 325)			_hx_int64_post_increment(high);
            		}
HXLINE( 326)		part10 = _hx_int64_shl(part10,32);
HXLINE( 327)		low = _hx_int64_add(low,part10);
HXLINE( 328)		if ((_hx_int64_ucompare(low,part10) < 0)) {
HXLINE( 329)			_hx_int64_post_increment(high);
            		}
HXLINE( 330)		::cpp::Int64 a2 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) );
HXDLIN( 330)		::cpp::Int64 a3 = _hx_int64_mul(a2,( (::cpp::Int64)(_hx_array_unsafe_get(b,0)) ));
HXDLIN( 330)		::cpp::Int64 a4 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) );
HXDLIN( 330)		high = _hx_int64_add(high,_hx_int64_add(a3,_hx_int64_mul(a4,( (::cpp::Int64)(_hx_array_unsafe_get(b,1)) ))));
HXLINE( 331)		return ::custom::haxe::_Int128::Int128_Impl__obj::make(high,low);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,mul,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::mulInt(::Array< ::cpp::Int64 > a,int b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_335_mulInt)
HXDLIN( 335)		return ::custom::haxe::_Int128::Int128_Impl__obj::mul(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,mulInt,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::mulInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_338_mulInt64)
HXDLIN( 338)		return ::custom::haxe::_Int128::Int128_Impl__obj::mul(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,mulInt64,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::intMul(int a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_341_intMul)
HXDLIN( 341)		return ::custom::haxe::_Int128::Int128_Impl__obj::mul(::custom::haxe::_Int128::Int128_Impl__obj::ofInt(a),b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,intMul,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::int64Mul(::cpp::Int64 a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_344_int64Mul)
HXDLIN( 344)		return ::custom::haxe::_Int128::Int128_Impl__obj::mul(::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(a),b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,int64Mul,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::div(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_350_div)
HXDLIN( 350)		return ( (::Array< ::cpp::Int64 >)(::custom::haxe::_Int128::Int128_Impl__obj::divMod(a,b)->__Field(HX_("quotient",ab,68,60,b2),::hx::paccDynamic)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,div,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::divInt(::Array< ::cpp::Int64 > a,int b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_353_divInt)
HXDLIN( 353)		return ::custom::haxe::_Int128::Int128_Impl__obj::div(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,divInt,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::divInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_356_divInt64)
HXDLIN( 356)		return ::custom::haxe::_Int128::Int128_Impl__obj::div(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,divInt64,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::intDiv(int a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_359_intDiv)
HXDLIN( 359)		return ::custom::haxe::_Int128::Int128_Impl__obj::div(::custom::haxe::_Int128::Int128_Impl__obj::ofInt(a),b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,intDiv,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::int64Div(::cpp::Int64 a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_362_int64Div)
HXDLIN( 362)		return ::custom::haxe::_Int128::Int128_Impl__obj::div(::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(a),b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,int64Div,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::mod(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_368_mod)
HXDLIN( 368)		return ( (::Array< ::cpp::Int64 >)(::custom::haxe::_Int128::Int128_Impl__obj::divMod(a,b)->__Field(HX_("modulus",37,f0,fa,f7),::hx::paccDynamic)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,mod,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::modInt(::Array< ::cpp::Int64 > a,int b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_371_modInt)
HXDLIN( 371)		return ::custom::haxe::_Int128::Int128_Impl__obj::mod(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,modInt,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::modInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_374_modInt64)
HXDLIN( 374)		return ::custom::haxe::_Int128::Int128_Impl__obj::mod(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,modInt64,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::intMod(int a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_377_intMod)
HXDLIN( 377)		return ::custom::haxe::_Int128::Int128_Impl__obj::mod(::custom::haxe::_Int128::Int128_Impl__obj::ofInt(a),b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,intMod,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::int64Mod(::cpp::Int64 a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_380_int64Mod)
HXDLIN( 380)		return ::custom::haxe::_Int128::Int128_Impl__obj::mod(::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(a),b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,int64Mod,return )

bool Int128_Impl__obj::eq(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_386_eq)
HXDLIN( 386)		::cpp::Int64 a1 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) );
HXDLIN( 386)		if (_hx_int64_eq(a1,( (::cpp::Int64)(_hx_array_unsafe_get(b,0)) ))) {
HXDLIN( 386)			::cpp::Int64 a2 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) );
HXDLIN( 386)			return _hx_int64_eq(a2,( (::cpp::Int64)(_hx_array_unsafe_get(b,1)) ));
            		}
            		else {
HXDLIN( 386)			return false;
            		}
HXDLIN( 386)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,eq,return )

bool Int128_Impl__obj::eqInt(::Array< ::cpp::Int64 > a,int b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_389_eqInt)
HXDLIN( 389)		return ::custom::haxe::_Int128::Int128_Impl__obj::eq(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,eqInt,return )

bool Int128_Impl__obj::eqInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_392_eqInt64)
HXDLIN( 392)		return ::custom::haxe::_Int128::Int128_Impl__obj::eq(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,eqInt64,return )

bool Int128_Impl__obj::neq(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_398_neq)
HXDLIN( 398)		::cpp::Int64 a1 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) );
HXDLIN( 398)		if (!(_hx_int64_neq(a1,( (::cpp::Int64)(_hx_array_unsafe_get(b,0)) )))) {
HXDLIN( 398)			::cpp::Int64 a2 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) );
HXDLIN( 398)			return _hx_int64_neq(a2,( (::cpp::Int64)(_hx_array_unsafe_get(b,1)) ));
            		}
            		else {
HXDLIN( 398)			return true;
            		}
HXDLIN( 398)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,neq,return )

bool Int128_Impl__obj::neqInt(::Array< ::cpp::Int64 > a,int b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_401_neqInt)
HXDLIN( 401)		return ::custom::haxe::_Int128::Int128_Impl__obj::neq(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,neqInt,return )

bool Int128_Impl__obj::neqInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_404_neqInt64)
HXDLIN( 404)		return ::custom::haxe::_Int128::Int128_Impl__obj::neq(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,neqInt64,return )

bool Int128_Impl__obj::lt(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_407_lt)
HXDLIN( 407)		return (_hx_int64_compare(::custom::haxe::_Int128::Int128_Impl__obj::compare(a,b),( (::cpp::Int64)(0) )) < 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,lt,return )

bool Int128_Impl__obj::ltInt(::Array< ::cpp::Int64 > a,int b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_410_ltInt)
HXDLIN( 410)		return ::custom::haxe::_Int128::Int128_Impl__obj::lt(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,ltInt,return )

bool Int128_Impl__obj::ltInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_413_ltInt64)
HXDLIN( 413)		return ::custom::haxe::_Int128::Int128_Impl__obj::lt(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,ltInt64,return )

bool Int128_Impl__obj::lte(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_416_lte)
HXDLIN( 416)		return (_hx_int64_compare(::custom::haxe::_Int128::Int128_Impl__obj::compare(a,b),( (::cpp::Int64)(0) )) <= 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,lte,return )

bool Int128_Impl__obj::lteInt(::Array< ::cpp::Int64 > a,int b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_419_lteInt)
HXDLIN( 419)		return ::custom::haxe::_Int128::Int128_Impl__obj::lte(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,lteInt,return )

bool Int128_Impl__obj::lteInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_422_lteInt64)
HXDLIN( 422)		return ::custom::haxe::_Int128::Int128_Impl__obj::lte(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,lteInt64,return )

bool Int128_Impl__obj::gt(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_425_gt)
HXDLIN( 425)		return (_hx_int64_compare(::custom::haxe::_Int128::Int128_Impl__obj::compare(a,b),( (::cpp::Int64)(0) )) > 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,gt,return )

bool Int128_Impl__obj::gtInt(::Array< ::cpp::Int64 > a,int b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_428_gtInt)
HXDLIN( 428)		return ::custom::haxe::_Int128::Int128_Impl__obj::gt(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,gtInt,return )

bool Int128_Impl__obj::gtInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_431_gtInt64)
HXDLIN( 431)		return ::custom::haxe::_Int128::Int128_Impl__obj::gt(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,gtInt64,return )

bool Int128_Impl__obj::gte(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_434_gte)
HXDLIN( 434)		return (_hx_int64_compare(::custom::haxe::_Int128::Int128_Impl__obj::compare(a,b),( (::cpp::Int64)(0) )) >= 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,gte,return )

bool Int128_Impl__obj::gteInt(::Array< ::cpp::Int64 > a,int b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_437_gteInt)
HXDLIN( 437)		return ::custom::haxe::_Int128::Int128_Impl__obj::gte(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,gteInt,return )

bool Int128_Impl__obj::gteInt64(::Array< ::cpp::Int64 > a,::cpp::Int64 b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_440_gteInt64)
HXDLIN( 440)		return ::custom::haxe::_Int128::Int128_Impl__obj::gte(a,::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,gteInt64,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::complement(::Array< ::cpp::Int64 > a){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_446_complement)
HXDLIN( 446)		::cpp::Int64 _hx_tmp = _hx_int64_complement(( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) ));
HXDLIN( 446)		return ::custom::haxe::_Int128::Int128_Impl__obj::make(_hx_tmp,_hx_int64_complement(( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,complement,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::_hx_and(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_452_and)
HXDLIN( 452)		::cpp::Int64 a1 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) );
HXDLIN( 452)		::cpp::Int64 _hx_tmp = _hx_int64_and(a1,( (::cpp::Int64)(_hx_array_unsafe_get(b,0)) ));
HXDLIN( 452)		::cpp::Int64 a2 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) );
HXDLIN( 452)		return ::custom::haxe::_Int128::Int128_Impl__obj::make(_hx_tmp,_hx_int64_and(a2,( (::cpp::Int64)(_hx_array_unsafe_get(b,1)) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,_hx_and,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::_hx_or(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_458_or)
HXDLIN( 458)		::cpp::Int64 a1 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) );
HXDLIN( 458)		::cpp::Int64 _hx_tmp = _hx_int64_or(a1,( (::cpp::Int64)(_hx_array_unsafe_get(b,0)) ));
HXDLIN( 458)		::cpp::Int64 a2 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) );
HXDLIN( 458)		return ::custom::haxe::_Int128::Int128_Impl__obj::make(_hx_tmp,_hx_int64_or(a2,( (::cpp::Int64)(_hx_array_unsafe_get(b,1)) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,_hx_or,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::_hx_xor(::Array< ::cpp::Int64 > a,::Array< ::cpp::Int64 > b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_464_xor)
HXDLIN( 464)		::cpp::Int64 a1 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) );
HXDLIN( 464)		::cpp::Int64 _hx_tmp = _hx_int64_xor(a1,( (::cpp::Int64)(_hx_array_unsafe_get(b,0)) ));
HXDLIN( 464)		::cpp::Int64 a2 = ( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) );
HXDLIN( 464)		return ::custom::haxe::_Int128::Int128_Impl__obj::make(_hx_tmp,_hx_int64_xor(a2,( (::cpp::Int64)(_hx_array_unsafe_get(b,1)) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,_hx_xor,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::shl(::Array< ::cpp::Int64 > a,int b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_469_shl)
HXLINE( 470)		b = (b & 127);
HXLINE( 471)		if ((b == 0)) {
HXLINE( 471)			::cpp::Int64 _hx_tmp = ( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) );
HXDLIN( 471)			return ::custom::haxe::_Int128::Int128_Impl__obj::make(_hx_tmp,( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) ));
            		}
            		else {
HXLINE( 471)			if ((b < 64)) {
HXLINE( 471)				::cpp::Int64 a1 = _hx_int64_shl(( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) ),b);
HXDLIN( 471)				::cpp::Int64 _hx_tmp1 = _hx_int64_or(a1,_hx_int64_ushr(( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) ),(64 - b)));
HXDLIN( 471)				return ::custom::haxe::_Int128::Int128_Impl__obj::make(_hx_tmp1,_hx_int64_shl(( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) ),b));
            			}
            			else {
HXLINE( 471)				return ::custom::haxe::_Int128::Int128_Impl__obj::make(_hx_int64_shl(( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) ),(b - 64)),( (::cpp::Int64)(0) ));
            			}
            		}
HXDLIN( 471)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,shl,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::shr(::Array< ::cpp::Int64 > a,int b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_478_shr)
HXLINE( 479)		b = (b & 127);
HXLINE( 480)		if ((b == 0)) {
HXLINE( 480)			::cpp::Int64 _hx_tmp = ( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) );
HXDLIN( 480)			return ::custom::haxe::_Int128::Int128_Impl__obj::make(_hx_tmp,( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) ));
            		}
            		else {
HXLINE( 480)			if ((b < 64)) {
HXLINE( 480)				::cpp::Int64 _hx_tmp1 = _hx_int64_shr(( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) ),b);
HXDLIN( 480)				::cpp::Int64 a1 = _hx_int64_shl(( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) ),(64 - b));
HXDLIN( 480)				return ::custom::haxe::_Int128::Int128_Impl__obj::make(_hx_tmp1,_hx_int64_or(a1,_hx_int64_ushr(( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) ),b)));
            			}
            			else {
HXLINE( 480)				::cpp::Int64 _hx_tmp2 = _hx_int64_shr(( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) ),63);
HXDLIN( 480)				return ::custom::haxe::_Int128::Int128_Impl__obj::make(_hx_tmp2,_hx_int64_shr(( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) ),(b - 64)));
            			}
            		}
HXDLIN( 480)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,shr,return )

::Array< ::cpp::Int64 > Int128_Impl__obj::ushr(::Array< ::cpp::Int64 > a,int b){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_487_ushr)
HXLINE( 488)		b = (b & 127);
HXLINE( 489)		if ((b == 0)) {
HXLINE( 489)			::cpp::Int64 _hx_tmp = ( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) );
HXDLIN( 489)			return ::custom::haxe::_Int128::Int128_Impl__obj::make(_hx_tmp,( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) ));
            		}
            		else {
HXLINE( 489)			if ((b < 64)) {
HXLINE( 489)				::cpp::Int64 _hx_tmp1 = _hx_int64_ushr(( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) ),b);
HXDLIN( 489)				::cpp::Int64 a1 = _hx_int64_shl(( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) ),(64 - b));
HXDLIN( 489)				return ::custom::haxe::_Int128::Int128_Impl__obj::make(_hx_tmp1,_hx_int64_or(a1,_hx_int64_ushr(( (::cpp::Int64)(_hx_array_unsafe_get(a,1)) ),b)));
            			}
            			else {
HXLINE( 489)				return ::custom::haxe::_Int128::Int128_Impl__obj::make(( (::cpp::Int64)(0) ),_hx_int64_ushr(( (::cpp::Int64)(_hx_array_unsafe_get(a,0)) ),(b - 64)));
            			}
            		}
HXDLIN( 489)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,ushr,return )

::cpp::Int64 Int128_Impl__obj::get_high(::Array< ::cpp::Int64 > this1){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_495_get_high)
HXDLIN( 495)		return ( (::cpp::Int64)(_hx_array_unsafe_get(this1,0)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,get_high,return )

::cpp::Int64 Int128_Impl__obj::set_high(::Array< ::cpp::Int64 > this1,::cpp::Int64 x){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_498_set_high)
HXDLIN( 498)		return ( (::cpp::Int64)(this1->__unsafe_set(0,x)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,set_high,return )

::cpp::Int64 Int128_Impl__obj::get_low(::Array< ::cpp::Int64 > this1){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_503_get_low)
HXDLIN( 503)		return ( (::cpp::Int64)(_hx_array_unsafe_get(this1,1)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128_Impl__obj,get_low,return )

::cpp::Int64 Int128_Impl__obj::set_low(::Array< ::cpp::Int64 > this1,::cpp::Int64 x){
            	HX_STACKFRAME(&_hx_pos_1883cd023f8a821a_506_set_low)
HXDLIN( 506)		return ( (::cpp::Int64)(this1->__unsafe_set(1,x)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int128_Impl__obj,set_low,return )


Int128_Impl__obj::Int128_Impl__obj()
{
}

bool Int128_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"eq") ) { outValue = eq_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lt") ) { outValue = lt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gt") ) { outValue = gt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"or") ) { outValue = _hx_or_dyn(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"neg") ) { outValue = neg_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sub") ) { outValue = sub_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mul") ) { outValue = mul_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"div") ) { outValue = div_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mod") ) { outValue = mod_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"neq") ) { outValue = neq_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lte") ) { outValue = lte_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gte") ) { outValue = gte_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"and") ) { outValue = _hx_and_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xor") ) { outValue = _hx_xor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shl") ) { outValue = shl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shr") ) { outValue = shr_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copy") ) { outValue = copy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"make") ) { outValue = make_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ushr") ) { outValue = ushr_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ofInt") ) { outValue = ofInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isNeg") ) { outValue = isNeg_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toStr") ) { outValue = toStr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"eqInt") ) { outValue = eqInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ltInt") ) { outValue = ltInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gtInt") ) { outValue = gtInt_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isZero") ) { outValue = isZero_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"divMod") ) { outValue = divMod_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addInt") ) { outValue = addInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intAdd") ) { outValue = intAdd_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subInt") ) { outValue = subInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intSub") ) { outValue = intSub_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mulInt") ) { outValue = mulInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intMul") ) { outValue = intMul_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"divInt") ) { outValue = divInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intDiv") ) { outValue = intDiv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modInt") ) { outValue = modInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intMod") ) { outValue = intMod_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"neqInt") ) { outValue = neqInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lteInt") ) { outValue = lteInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gteInt") ) { outValue = gteInt_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ofInt64") ) { outValue = ofInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toInt64") ) { outValue = toInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"eqInt64") ) { outValue = eqInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ltInt64") ) { outValue = ltInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gtInt64") ) { outValue = gtInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_low") ) { outValue = get_low_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_low") ) { outValue = set_low_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ucompare") ) { outValue = ucompare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addInt64") ) { outValue = addInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int64Add") ) { outValue = int64Add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subInt64") ) { outValue = subInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int64Sub") ) { outValue = int64Sub_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mulInt64") ) { outValue = mulInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int64Mul") ) { outValue = int64Mul_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"divInt64") ) { outValue = divInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int64Div") ) { outValue = int64Div_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modInt64") ) { outValue = modInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"int64Mod") ) { outValue = int64Mod_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"neqInt64") ) { outValue = neqInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lteInt64") ) { outValue = lteInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gteInt64") ) { outValue = gteInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_high") ) { outValue = get_high_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_high") ) { outValue = set_high_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromFloat") ) { outValue = fromFloat_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"complement") ) { outValue = complement_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"parseString") ) { outValue = parseString_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"preIncrement") ) { outValue = preIncrement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"preDecrement") ) { outValue = preDecrement_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"postIncrement") ) { outValue = postIncrement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"postDecrement") ) { outValue = postDecrement_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Int128_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Int128_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Int128_Impl__obj::__mClass;

static ::String Int128_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("copy",b5,bb,c4,41),
	HX_("make",ee,39,56,48),
	HX_("ofInt",18,ec,1d,2d),
	HX_("ofInt64",56,51,83,21),
	HX_("toInt",34,be,11,14),
	HX_("toInt64",72,e2,a4,8a),
	HX_("isNeg",86,fa,51,c1),
	HX_("isZero",32,d4,57,6e),
	HX_("compare",a5,18,69,83),
	HX_("ucompare",d0,40,77,a7),
	HX_("toStr",f6,59,19,14),
	HX_("toString",ac,d0,6e,38),
	HX_("parseString",64,d5,6c,8c),
	HX_("fromFloat",d2,af,1f,b7),
	HX_("divMod",f1,f9,fc,be),
	HX_("neg",50,d0,53,00),
	HX_("preIncrement",8c,e9,fe,d7),
	HX_("postIncrement",af,d5,b1,df),
	HX_("preDecrement",70,d9,81,b6),
	HX_("postDecrement",93,c5,34,be),
	HX_("add",21,f2,49,00),
	HX_("addInt",4e,1d,01,9f),
	HX_("addInt64",0c,bc,7d,37),
	HX_("intAdd",72,1c,6b,9e),
	HX_("int64Add",34,c6,83,ef),
	HX_("sub",80,a9,57,00),
	HX_("subInt",4f,0b,eb,99),
	HX_("subInt64",4d,ec,3f,33),
	HX_("intSub",d1,d3,78,9e),
	HX_("int64Sub",93,7d,91,ef),
	HX_("mul",04,1c,53,00),
	HX_("mulInt",4b,03,63,3a),
	HX_("mulInt64",49,db,a2,db),
	HX_("intMul",55,46,74,9e),
	HX_("int64Mul",17,f0,8c,ef),
	HX_("div",51,3d,4c,00),
	HX_("divInt",1e,f0,f9,be),
	HX_("divInt64",dc,e2,6c,e5),
	HX_("intDiv",a2,67,6d,9e),
	HX_("int64Div",64,11,86,ef),
	HX_("mod",c2,16,53,00),
	HX_("modInt",4d,d3,b1,c0),
	HX_("modInt64",cb,2f,47,af),
	HX_("intMod",13,41,74,9e),
	HX_("int64Mod",d5,ea,8c,ef),
	HX_("eq",6c,58,00,00),
	HX_("eqInt",e3,77,61,72),
	HX_("eqInt64",e1,a5,99,e7),
	HX_("neq",5a,d0,53,00),
	HX_("neqInt",b5,28,a3,6d),
	HX_("neqInt64",33,af,46,7b),
	HX_("lt",88,5e,00,00),
	HX_("ltInt",47,2b,2b,7c),
	HX_("ltInt64",45,fa,c1,3d),
	HX_("lte",dd,58,52,00),
	HX_("lteInt",12,94,00,3c),
	HX_("lteInt64",d0,6b,5b,ac),
	HX_("gt",2d,5a,00,00),
	HX_("gtInt",c2,44,2a,9b),
	HX_("gtInt64",80,a8,d6,6d),
	HX_("gte",98,8d,4e,00),
	HX_("gteInt",37,c6,37,3c),
	HX_("gteInt64",35,31,5f,8e),
	HX_("complement",e6,42,b4,fd),
	HX_("and",d7,fa,49,00),
	HX_("or",23,61,00,00),
	HX_("xor",9b,6f,5b,00),
	HX_("shl",37,9e,57,00),
	HX_("shr",3d,9e,57,00),
	HX_("ushr",e8,94,ad,4d),
	HX_("get_high",eb,f2,c8,c4),
	HX_("set_high",5f,4c,26,73),
	HX_("get_low",2b,1d,c7,26),
	HX_("set_low",37,ae,c8,19),
	::String(null())
};

void Int128_Impl__obj::__register()
{
	Int128_Impl__obj _hx_dummy;
	Int128_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("custom.haxe._Int128.Int128_Impl_",1a,fa,f5,9c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Int128_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Int128_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Int128_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Int128_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Int128_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace custom
} // end namespace haxe
} // end namespace _Int128
