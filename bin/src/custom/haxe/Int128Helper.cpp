// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_custom_haxe_Int128Helper
#include <custom/haxe/Int128Helper.h>
#endif
#ifndef INCLUDED_custom_haxe__Int128_Int128_Impl_
#include <custom/haxe/_Int128/Int128_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5f9b87ef6f788509_35_parseString,"custom.haxe.Int128Helper","parseString",0x1a685b17,"custom.haxe.Int128Helper.parseString","custom/haxe/Int128Helper.hx",35,0x0453e75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f9b87ef6f788509_78_fromFloat,"custom.haxe.Int128Helper","fromFloat",0x67f652c5,"custom.haxe.Int128Helper.fromFloat","custom/haxe/Int128Helper.hx",78,0x0453e75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f9b87ef6f788509_120_boot,"custom.haxe.Int128Helper","boot",0x180dc61f,"custom.haxe.Int128Helper.boot","custom/haxe/Int128Helper.hx",120,0x0453e75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f9b87ef6f788509_125_boot,"custom.haxe.Int128Helper","boot",0x180dc61f,"custom.haxe.Int128Helper.boot","custom/haxe/Int128Helper.hx",125,0x0453e75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f9b87ef6f788509_131_boot,"custom.haxe.Int128Helper","boot",0x180dc61f,"custom.haxe.Int128Helper.boot","custom/haxe/Int128Helper.hx",131,0x0453e75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f9b87ef6f788509_137_boot,"custom.haxe.Int128Helper","boot",0x180dc61f,"custom.haxe.Int128Helper.boot","custom/haxe/Int128Helper.hx",137,0x0453e75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f9b87ef6f788509_143_boot,"custom.haxe.Int128Helper","boot",0x180dc61f,"custom.haxe.Int128Helper.boot","custom/haxe/Int128Helper.hx",143,0x0453e75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f9b87ef6f788509_149_boot,"custom.haxe.Int128Helper","boot",0x180dc61f,"custom.haxe.Int128Helper.boot","custom/haxe/Int128Helper.hx",149,0x0453e75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f9b87ef6f788509_155_boot,"custom.haxe.Int128Helper","boot",0x180dc61f,"custom.haxe.Int128Helper.boot","custom/haxe/Int128Helper.hx",155,0x0453e75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f9b87ef6f788509_161_boot,"custom.haxe.Int128Helper","boot",0x180dc61f,"custom.haxe.Int128Helper.boot","custom/haxe/Int128Helper.hx",161,0x0453e75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f9b87ef6f788509_164_boot,"custom.haxe.Int128Helper","boot",0x180dc61f,"custom.haxe.Int128Helper.boot","custom/haxe/Int128Helper.hx",164,0x0453e75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f9b87ef6f788509_165_boot,"custom.haxe.Int128Helper","boot",0x180dc61f,"custom.haxe.Int128Helper.boot","custom/haxe/Int128Helper.hx",165,0x0453e75d)
HX_LOCAL_STACK_FRAME(_hx_pos_5f9b87ef6f788509_166_boot,"custom.haxe.Int128Helper","boot",0x180dc61f,"custom.haxe.Int128Helper.boot","custom/haxe/Int128Helper.hx",166,0x0453e75d)
namespace custom{
namespace haxe{

void Int128Helper_obj::__construct() { }

Dynamic Int128Helper_obj::__CreateEmpty() { return new Int128Helper_obj; }

void *Int128Helper_obj::_hx_vtable = 0;

Dynamic Int128Helper_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Int128Helper_obj > _hx_result = new Int128Helper_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Int128Helper_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x31aba16d;
}

::Array< ::cpp::Int64 > Int128Helper_obj::parseString(::String sParam){
            	HX_STACKFRAME(&_hx_pos_5f9b87ef6f788509_35_parseString)
HXLINE(  36)		::Array< ::cpp::Int64 > base = ::custom::haxe::_Int128::Int128_Impl__obj::ofInt(10);
HXLINE(  37)		::Array< ::cpp::Int64 > current = ::custom::haxe::_Int128::Int128_Impl__obj::ofInt(0);
HXLINE(  38)		::Array< ::cpp::Int64 > multiplier = ::custom::haxe::_Int128::Int128_Impl__obj::ofInt(1);
HXLINE(  39)		bool sIsNegative = false;
HXLINE(  41)		::String s = ::StringTools_obj::trim(sParam);
HXLINE(  42)		if ((s.charAt(0) == HX_("-",2d,00,00,00))) {
HXLINE(  43)			sIsNegative = true;
HXLINE(  44)			s = s.substring(1,s.length);
            		}
HXLINE(  46)		int len = s.length;
HXLINE(  48)		{
HXLINE(  48)			int _g = 0;
HXDLIN(  48)			int _g1 = len;
HXDLIN(  48)			while((_g < _g1)){
HXLINE(  48)				_g = (_g + 1);
HXDLIN(  48)				int i = (_g - 1);
HXLINE(  49)				int digitInt = (( (int)(s.charCodeAt(((len - 1) - i))) ) - 48);
HXLINE(  51)				bool _hx_tmp;
HXDLIN(  51)				if ((digitInt >= 0)) {
HXLINE(  51)					_hx_tmp = (digitInt > 9);
            				}
            				else {
HXLINE(  51)					_hx_tmp = true;
            				}
HXDLIN(  51)				if (_hx_tmp) {
HXLINE(  52)					HX_STACK_DO_THROW(HX_("NumberFormatError",a8,c8,6f,c1));
            				}
HXLINE(  55)				if ((digitInt != 0)) {
HXLINE(  56)					::Array< ::cpp::Int64 > digit = ::custom::haxe::_Int128::Int128_Impl__obj::ofInt(digitInt);
HXLINE(  57)					if (sIsNegative) {
HXLINE(  58)						current = ::custom::haxe::_Int128::Int128_Impl__obj::sub(current,::custom::haxe::_Int128::Int128_Impl__obj::mul(multiplier,digit));
HXLINE(  59)						if (!(::custom::haxe::_Int128::Int128_Impl__obj::isNeg(current))) {
HXLINE(  60)							HX_STACK_DO_THROW(HX_("NumberFormatError: Underflow",d8,65,97,7b));
            						}
            					}
            					else {
HXLINE(  63)						current = ::custom::haxe::_Int128::Int128_Impl__obj::add(current,::custom::haxe::_Int128::Int128_Impl__obj::mul(multiplier,digit));
HXLINE(  64)						if (::custom::haxe::_Int128::Int128_Impl__obj::isNeg(current)) {
HXLINE(  65)							HX_STACK_DO_THROW(HX_("NumberFormatError: Overflow",b0,12,ea,e1));
            						}
            					}
            				}
HXLINE(  70)				multiplier = ::custom::haxe::_Int128::Int128_Impl__obj::mul(multiplier,base);
            			}
            		}
HXLINE(  72)		return current;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128Helper_obj,parseString,return )

::Array< ::cpp::Int64 > Int128Helper_obj::fromFloat(Float f){
            	HX_STACKFRAME(&_hx_pos_5f9b87ef6f788509_78_fromFloat)
HXLINE(  79)		bool _hx_tmp;
HXDLIN(  79)		if (!(::Math_obj::isNaN(f))) {
HXLINE(  79)			_hx_tmp = !(::Math_obj::isFinite(f));
            		}
            		else {
HXLINE(  79)			_hx_tmp = true;
            		}
HXDLIN(  79)		if (_hx_tmp) {
HXLINE(  80)			HX_STACK_DO_THROW(HX_("Number is NaN or Infinite",2d,21,08,80));
            		}
HXLINE(  83)		Float noFractions = (f - ::hx::Mod(f,1));
HXLINE(  89)		if ((noFractions > ((Float)9007199254740991))) {
HXLINE(  90)			HX_STACK_DO_THROW(HX_("Conversion overflow",6c,95,02,46));
            		}
HXLINE(  92)		if ((noFractions < ((Float)-9007199254740991))) {
HXLINE(  93)			HX_STACK_DO_THROW(HX_("Conversion underflow",9c,47,f1,ac));
            		}
HXLINE(  96)		::Array< ::cpp::Int64 > result = ::custom::haxe::_Int128::Int128_Impl__obj::ofInt(0);
HXLINE(  97)		bool neg = (noFractions < 0);
HXLINE(  98)		Float rest;
HXDLIN(  98)		if (neg) {
HXLINE(  98)			rest = -(noFractions);
            		}
            		else {
HXLINE(  98)			rest = noFractions;
            		}
HXLINE( 100)		int i = 0;
HXLINE( 101)		while((rest >= 1)){
HXLINE( 102)			Float curr = ::hx::Mod(rest,2);
HXLINE( 103)			rest = (rest / ( (Float)(2) ));
HXLINE( 104)			if ((curr >= 1)) {
HXLINE( 105)				result = ::custom::haxe::_Int128::Int128_Impl__obj::add(result,::custom::haxe::_Int128::Int128_Impl__obj::shl(::custom::haxe::_Int128::Int128_Impl__obj::ofInt(1),i));
            			}
HXLINE( 107)			i = (i + 1);
            		}
HXLINE( 110)		if (neg) {
HXLINE( 111)			result = ::custom::haxe::_Int128::Int128_Impl__obj::neg(result);
            		}
HXLINE( 114)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int128Helper_obj,fromFloat,return )

::Array< ::cpp::Int64 > Int128Helper_obj::maxValue;

::Array< ::cpp::Int64 > Int128Helper_obj::minValue;

::Array< ::cpp::Int64 > Int128Helper_obj::maxValue64;

::Array< ::cpp::Int64 > Int128Helper_obj::minValue64;

::Array< ::cpp::Int64 > Int128Helper_obj::maxValue64U;

::Array< ::cpp::Int64 > Int128Helper_obj::maxValue32;

::Array< ::cpp::Int64 > Int128Helper_obj::minValue32;

::Array< ::cpp::Int64 > Int128Helper_obj::maxValue32U;

::Array< ::cpp::Int64 > Int128Helper_obj::BILLION;

::Array< ::cpp::Int64 > Int128Helper_obj::QUINTILLION;

::Array< ::cpp::Int64 > Int128Helper_obj::UNDECILLION;


Int128Helper_obj::Int128Helper_obj()
{
}

bool Int128Helper_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"BILLION") ) { outValue = ( BILLION ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"maxValue") ) { outValue = ( maxValue ); return true; }
		if (HX_FIELD_EQ(inName,"minValue") ) { outValue = ( minValue ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromFloat") ) { outValue = fromFloat_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxValue64") ) { outValue = ( maxValue64 ); return true; }
		if (HX_FIELD_EQ(inName,"minValue64") ) { outValue = ( minValue64 ); return true; }
		if (HX_FIELD_EQ(inName,"maxValue32") ) { outValue = ( maxValue32 ); return true; }
		if (HX_FIELD_EQ(inName,"minValue32") ) { outValue = ( minValue32 ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"parseString") ) { outValue = parseString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"maxValue64U") ) { outValue = ( maxValue64U ); return true; }
		if (HX_FIELD_EQ(inName,"maxValue32U") ) { outValue = ( maxValue32U ); return true; }
		if (HX_FIELD_EQ(inName,"QUINTILLION") ) { outValue = ( QUINTILLION ); return true; }
		if (HX_FIELD_EQ(inName,"UNDECILLION") ) { outValue = ( UNDECILLION ); return true; }
	}
	return false;
}

bool Int128Helper_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"BILLION") ) { BILLION=ioValue.Cast< ::Array< ::cpp::Int64 > >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"maxValue") ) { maxValue=ioValue.Cast< ::Array< ::cpp::Int64 > >(); return true; }
		if (HX_FIELD_EQ(inName,"minValue") ) { minValue=ioValue.Cast< ::Array< ::cpp::Int64 > >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maxValue64") ) { maxValue64=ioValue.Cast< ::Array< ::cpp::Int64 > >(); return true; }
		if (HX_FIELD_EQ(inName,"minValue64") ) { minValue64=ioValue.Cast< ::Array< ::cpp::Int64 > >(); return true; }
		if (HX_FIELD_EQ(inName,"maxValue32") ) { maxValue32=ioValue.Cast< ::Array< ::cpp::Int64 > >(); return true; }
		if (HX_FIELD_EQ(inName,"minValue32") ) { minValue32=ioValue.Cast< ::Array< ::cpp::Int64 > >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"maxValue64U") ) { maxValue64U=ioValue.Cast< ::Array< ::cpp::Int64 > >(); return true; }
		if (HX_FIELD_EQ(inName,"maxValue32U") ) { maxValue32U=ioValue.Cast< ::Array< ::cpp::Int64 > >(); return true; }
		if (HX_FIELD_EQ(inName,"QUINTILLION") ) { QUINTILLION=ioValue.Cast< ::Array< ::cpp::Int64 > >(); return true; }
		if (HX_FIELD_EQ(inName,"UNDECILLION") ) { UNDECILLION=ioValue.Cast< ::Array< ::cpp::Int64 > >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Int128Helper_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Int128Helper_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::cpp::Int64 > */ ,(void *) &Int128Helper_obj::maxValue,HX_("maxValue",2d,d2,d5,db)},
	{::hx::fsObject /* ::Array< ::cpp::Int64 > */ ,(void *) &Int128Helper_obj::minValue,HX_("minValue",7f,ec,ef,28)},
	{::hx::fsObject /* ::Array< ::cpp::Int64 > */ ,(void *) &Int128Helper_obj::maxValue64,HX_("maxValue64",ab,a6,90,da)},
	{::hx::fsObject /* ::Array< ::cpp::Int64 > */ ,(void *) &Int128Helper_obj::minValue64,HX_("minValue64",7d,79,23,36)},
	{::hx::fsObject /* ::Array< ::cpp::Int64 > */ ,(void *) &Int128Helper_obj::maxValue64U,HX_("maxValue64U",4a,2f,01,64)},
	{::hx::fsObject /* ::Array< ::cpp::Int64 > */ ,(void *) &Int128Helper_obj::maxValue32,HX_("maxValue32",0c,a4,90,da)},
	{::hx::fsObject /* ::Array< ::cpp::Int64 > */ ,(void *) &Int128Helper_obj::minValue32,HX_("minValue32",de,76,23,36)},
	{::hx::fsObject /* ::Array< ::cpp::Int64 > */ ,(void *) &Int128Helper_obj::maxValue32U,HX_("maxValue32U",c9,e6,fe,63)},
	{::hx::fsObject /* ::Array< ::cpp::Int64 > */ ,(void *) &Int128Helper_obj::BILLION,HX_("BILLION",01,ec,7d,dd)},
	{::hx::fsObject /* ::Array< ::cpp::Int64 > */ ,(void *) &Int128Helper_obj::QUINTILLION,HX_("QUINTILLION",ea,b8,4f,fd)},
	{::hx::fsObject /* ::Array< ::cpp::Int64 > */ ,(void *) &Int128Helper_obj::UNDECILLION,HX_("UNDECILLION",e8,2b,56,da)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Int128Helper_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Int128Helper_obj::maxValue,"maxValue");
	HX_MARK_MEMBER_NAME(Int128Helper_obj::minValue,"minValue");
	HX_MARK_MEMBER_NAME(Int128Helper_obj::maxValue64,"maxValue64");
	HX_MARK_MEMBER_NAME(Int128Helper_obj::minValue64,"minValue64");
	HX_MARK_MEMBER_NAME(Int128Helper_obj::maxValue64U,"maxValue64U");
	HX_MARK_MEMBER_NAME(Int128Helper_obj::maxValue32,"maxValue32");
	HX_MARK_MEMBER_NAME(Int128Helper_obj::minValue32,"minValue32");
	HX_MARK_MEMBER_NAME(Int128Helper_obj::maxValue32U,"maxValue32U");
	HX_MARK_MEMBER_NAME(Int128Helper_obj::BILLION,"BILLION");
	HX_MARK_MEMBER_NAME(Int128Helper_obj::QUINTILLION,"QUINTILLION");
	HX_MARK_MEMBER_NAME(Int128Helper_obj::UNDECILLION,"UNDECILLION");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Int128Helper_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Int128Helper_obj::maxValue,"maxValue");
	HX_VISIT_MEMBER_NAME(Int128Helper_obj::minValue,"minValue");
	HX_VISIT_MEMBER_NAME(Int128Helper_obj::maxValue64,"maxValue64");
	HX_VISIT_MEMBER_NAME(Int128Helper_obj::minValue64,"minValue64");
	HX_VISIT_MEMBER_NAME(Int128Helper_obj::maxValue64U,"maxValue64U");
	HX_VISIT_MEMBER_NAME(Int128Helper_obj::maxValue32,"maxValue32");
	HX_VISIT_MEMBER_NAME(Int128Helper_obj::minValue32,"minValue32");
	HX_VISIT_MEMBER_NAME(Int128Helper_obj::maxValue32U,"maxValue32U");
	HX_VISIT_MEMBER_NAME(Int128Helper_obj::BILLION,"BILLION");
	HX_VISIT_MEMBER_NAME(Int128Helper_obj::QUINTILLION,"QUINTILLION");
	HX_VISIT_MEMBER_NAME(Int128Helper_obj::UNDECILLION,"UNDECILLION");
};

#endif

::hx::Class Int128Helper_obj::__mClass;

static ::String Int128Helper_obj_sStaticFields[] = {
	HX_("parseString",64,d5,6c,8c),
	HX_("fromFloat",d2,af,1f,b7),
	HX_("maxValue",2d,d2,d5,db),
	HX_("minValue",7f,ec,ef,28),
	HX_("maxValue64",ab,a6,90,da),
	HX_("minValue64",7d,79,23,36),
	HX_("maxValue64U",4a,2f,01,64),
	HX_("maxValue32",0c,a4,90,da),
	HX_("minValue32",de,76,23,36),
	HX_("maxValue32U",c9,e6,fe,63),
	HX_("BILLION",01,ec,7d,dd),
	HX_("QUINTILLION",ea,b8,4f,fd),
	HX_("UNDECILLION",e8,2b,56,da),
	::String(null())
};

void Int128Helper_obj::__register()
{
	Int128Helper_obj _hx_dummy;
	Int128Helper_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("custom.haxe.Int128Helper",a1,65,83,35);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Int128Helper_obj::__GetStatic;
	__mClass->mSetStaticField = &Int128Helper_obj::__SetStatic;
	__mClass->mMarkFunc = Int128Helper_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Int128Helper_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Int128Helper_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Int128Helper_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Int128Helper_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Int128Helper_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Int128Helper_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5f9b87ef6f788509_120_boot)
HXDLIN( 120)		maxValue = ::custom::haxe::_Int128::Int128_Impl__obj::make(_hx_int64_make((int)2147483647,-1),( (::cpp::Int64)(-1) ));
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f9b87ef6f788509_125_boot)
HXDLIN( 125)		minValue = ::custom::haxe::_Int128::Int128_Impl__obj::complement(::custom::haxe::Int128Helper_obj::maxValue);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f9b87ef6f788509_131_boot)
HXDLIN( 131)		maxValue64 = ::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(( (::cpp::Int64)(_hx_array_unsafe_get(::custom::haxe::Int128Helper_obj::maxValue,0)) ));
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f9b87ef6f788509_137_boot)
HXDLIN( 137)		minValue64 = ::custom::haxe::_Int128::Int128_Impl__obj::complement(::custom::haxe::Int128Helper_obj::maxValue64);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f9b87ef6f788509_143_boot)
HXDLIN( 143)		maxValue64U = ::custom::haxe::_Int128::Int128_Impl__obj::make(( (::cpp::Int64)(0) ),( (::cpp::Int64)(-1) ));
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f9b87ef6f788509_149_boot)
HXDLIN( 149)		maxValue32 = ::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(( (::cpp::Int64)((int)2147483647) ));
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f9b87ef6f788509_155_boot)
HXDLIN( 155)		minValue32 = ::custom::haxe::_Int128::Int128_Impl__obj::complement(::custom::haxe::Int128Helper_obj::maxValue32);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f9b87ef6f788509_161_boot)
HXDLIN( 161)		maxValue32U = ::custom::haxe::_Int128::Int128_Impl__obj::ofInt64(_hx_int64_make(0,-1));
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f9b87ef6f788509_164_boot)
HXDLIN( 164)		BILLION = ::custom::haxe::_Int128::Int128_Impl__obj::ofInt((int)1000000000);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f9b87ef6f788509_165_boot)
HXDLIN( 165)		QUINTILLION = ::custom::haxe::_Int128::Int128_Impl__obj::mul(::custom::haxe::Int128Helper_obj::BILLION,::custom::haxe::Int128Helper_obj::BILLION);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f9b87ef6f788509_166_boot)
HXDLIN( 166)		UNDECILLION = ::custom::haxe::_Int128::Int128_Impl__obj::mul(::custom::haxe::Int128Helper_obj::QUINTILLION,::custom::haxe::Int128Helper_obj::QUINTILLION);
            	}
}

} // end namespace custom
} // end namespace haxe
