// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_custom_haxe_Int128Helper
#include <custom/haxe/Int128Helper.h>
#endif
#ifndef INCLUDED_custom_haxe__Int128_Int128_Impl_
#include <custom/haxe/_Int128/Int128_Impl_.h>
#endif
#ifndef INCLUDED_stuff_MathD
#include <stuff/MathD.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_8e4d95cc06f37059_4_Randomold,"stuff.MathD","Randomold",0x46366f58,"stuff.MathD.Randomold","stuff/MathD.hx",4,0x3225789d)
HX_LOCAL_STACK_FRAME(_hx_pos_8e4d95cc06f37059_13_Random,"stuff.MathD","Random",0x1d5a80af,"stuff.MathD.Random","stuff/MathD.hx",13,0x3225789d)
namespace stuff{

void MathD_obj::__construct() { }

Dynamic MathD_obj::__CreateEmpty() { return new MathD_obj; }

void *MathD_obj::_hx_vtable = 0;

Dynamic MathD_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MathD_obj > _hx_result = new MathD_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MathD_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x266fa3b0;
}

::Array< ::cpp::Int64 > MathD_obj::Randomold(Float time){
            	HX_STACKFRAME(&_hx_pos_8e4d95cc06f37059_4_Randomold)
HXLINE(   5)		::Array< ::cpp::Int64 > val = ::custom::haxe::_Int128::Int128_Impl__obj::fromFloat((time * ( (Float)(1000) )));
HXDLIN(   5)		::Array< ::cpp::Int64 > val1 = ::custom::haxe::_Int128::Int128_Impl__obj::mul(val,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(3000));
HXDLIN(   5)		::Array< ::cpp::Int64 > val2 = ::custom::haxe::_Int128::Int128_Impl__obj::mul(val1,::custom::haxe::Int128Helper_obj::maxValue);
HXLINE(   6)		if (::custom::haxe::_Int128::Int128_Impl__obj::lt(val2,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(0))) {
HXLINE(   6)			return ::custom::haxe::_Int128::Int128_Impl__obj::neg(val2);
            		}
            		else {
HXLINE(   6)			return val2;
            		}
HXDLIN(   6)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathD_obj,Randomold,return )

::Array< ::cpp::Int64 > MathD_obj::Random(int from,int to){
            	HX_STACKFRAME(&_hx_pos_8e4d95cc06f37059_13_Random)
HXDLIN(  13)		return ::custom::haxe::_Int128::Int128_Impl__obj::ofInt((from + ::Math_obj::floor((( (Float)(((to - from) + 1)) ) * ::Math_obj::random()))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathD_obj,Random,return )


MathD_obj::MathD_obj()
{
}

bool MathD_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"Random") ) { outValue = Random_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"Randomold") ) { outValue = Randomold_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *MathD_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *MathD_obj_sStaticStorageInfo = 0;
#endif

::hx::Class MathD_obj::__mClass;

static ::String MathD_obj_sStaticFields[] = {
	HX_("Randomold",64,3a,35,49),
	HX_("Random",23,96,23,ec),
	::String(null())
};

void MathD_obj::__register()
{
	MathD_obj _hx_dummy;
	MathD_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("stuff.MathD",62,9c,5f,c4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MathD_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MathD_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< MathD_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MathD_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MathD_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace stuff
