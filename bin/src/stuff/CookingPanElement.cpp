// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_custom_haxe__Int128_Int128_Impl_
#include <custom/haxe/_Int128/Int128_Impl_.h>
#endif
#ifndef INCLUDED_stuff_CookingPanElement
#include <stuff/CookingPanElement.h>
#endif
#ifndef INCLUDED_stuff_CookingPanRGB
#include <stuff/CookingPanRGB.h>
#endif
#ifndef INCLUDED_stuff_DanRunElement
#include <stuff/DanRunElement.h>
#endif
#ifndef INCLUDED_stuff_Element
#include <stuff/Element.h>
#endif
#ifndef INCLUDED_stuff_Map
#include <stuff/Map.h>
#endif
#ifndef INCLUDED_stuff_TrackerFile
#include <stuff/TrackerFile.h>
#endif
#ifndef INCLUDED_stuff_UtilShit
#include <stuff/UtilShit.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_43005e72bf2f475e_9_new,"stuff.CookingPanElement","new",0xe3755ef1,"stuff.CookingPanElement.new","stuff/CookingPanElement.hx",9,0x90d2f020)
namespace stuff{

void CookingPanElement_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_43005e72bf2f475e_9_new)
HXLINE(  10)		super::__construct();
HXLINE(  11)		Float _hx_tmp = ::Math_obj::random();
HXDLIN(  11)		this->type = ::custom::haxe::_Int128::Int128_Impl__obj::ofInt(::Std_obj::_hx_int((_hx_tmp * ( (Float)(::stuff::UtilShit_obj::level()) ))));
HXLINE(  12)		::Array< ::cpp::Int64 > _hx_tmp1 = this->type;
HXDLIN(  12)		this->isVanilla = ::custom::haxe::_Int128::Int128_Impl__obj::eq(_hx_tmp1,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(0));
HXLINE(  13)		 ::stuff::CookingPanRGB _hx_tmp2;
HXDLIN(  13)		if (this->isVanilla) {
HXLINE(  13)			_hx_tmp2 =  ::stuff::CookingPanRGB_obj::__alloc( HX_CTX ,null(),null(),null());
            		}
            		else {
HXLINE(  13)			_hx_tmp2 = ::stuff::CookingPanRGB_obj::Random();
            		}
HXDLIN(  13)		this->colorValues = _hx_tmp2;
HXLINE(  14)		this->placementX = ::Std_obj::_hx_int((::Math_obj::random() * ( (Float)(::stuff::Map_obj::BOARD_WIDTH) )));
HXLINE(  16)		::stuff::TrackerFile_obj::putTime();
HXLINE(  17)		::stuff::TrackerFile_obj::addPanElement(::hx::ObjectPtr<OBJ_>(this));
HXLINE(  18)		::stuff::TrackerFile_obj::forfeitElement();
            	}

Dynamic CookingPanElement_obj::__CreateEmpty() { return new CookingPanElement_obj; }

void *CookingPanElement_obj::_hx_vtable = 0;

Dynamic CookingPanElement_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CookingPanElement_obj > _hx_result = new CookingPanElement_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CookingPanElement_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x09bcbbce) {
		if (inClassId<=(int)0x0103c431) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0103c431;
		} else {
			return inClassId==(int)0x09bcbbce;
		}
	} else {
		return inClassId==(int)0x24860ab8;
	}
}


::hx::ObjectPtr< CookingPanElement_obj > CookingPanElement_obj::__new() {
	::hx::ObjectPtr< CookingPanElement_obj > __this = new CookingPanElement_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CookingPanElement_obj > CookingPanElement_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CookingPanElement_obj *__this = (CookingPanElement_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CookingPanElement_obj), true, "stuff.CookingPanElement"));
	*(void **)__this = CookingPanElement_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CookingPanElement_obj::CookingPanElement_obj()
{
}

void CookingPanElement_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CookingPanElement);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(isVanilla,"isVanilla");
	HX_MARK_MEMBER_NAME(colorValues,"colorValues");
	HX_MARK_MEMBER_NAME(placementX,"placementX");
	HX_MARK_END_CLASS();
}

void CookingPanElement_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(isVanilla,"isVanilla");
	HX_VISIT_MEMBER_NAME(colorValues,"colorValues");
	HX_VISIT_MEMBER_NAME(placementX,"placementX");
}

::hx::Val CookingPanElement_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isVanilla") ) { return ::hx::Val( isVanilla ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"placementX") ) { return ::hx::Val( placementX ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"colorValues") ) { return ::hx::Val( colorValues ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CookingPanElement_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::Array< ::cpp::Int64 > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isVanilla") ) { isVanilla=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"placementX") ) { placementX=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"colorValues") ) { colorValues=inValue.Cast<  ::stuff::CookingPanRGB >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CookingPanElement_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("isVanilla",b1,c2,4e,93));
	outFields->push(HX_("colorValues",a5,95,df,09));
	outFields->push(HX_("placementX",d3,fe,25,47));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CookingPanElement_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::cpp::Int64 > */ ,(int)offsetof(CookingPanElement_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsBool,(int)offsetof(CookingPanElement_obj,isVanilla),HX_("isVanilla",b1,c2,4e,93)},
	{::hx::fsObject /*  ::stuff::CookingPanRGB */ ,(int)offsetof(CookingPanElement_obj,colorValues),HX_("colorValues",a5,95,df,09)},
	{::hx::fsInt,(int)offsetof(CookingPanElement_obj,placementX),HX_("placementX",d3,fe,25,47)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CookingPanElement_obj_sStaticStorageInfo = 0;
#endif

static ::String CookingPanElement_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("isVanilla",b1,c2,4e,93),
	HX_("colorValues",a5,95,df,09),
	HX_("placementX",d3,fe,25,47),
	::String(null()) };

::hx::Class CookingPanElement_obj::__mClass;

void CookingPanElement_obj::__register()
{
	CookingPanElement_obj _hx_dummy;
	CookingPanElement_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("stuff.CookingPanElement",7f,12,e5,17);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CookingPanElement_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CookingPanElement_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CookingPanElement_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CookingPanElement_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace stuff
