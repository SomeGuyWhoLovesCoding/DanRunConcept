// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_custom_haxe__Int128_Int128_Impl_
#include <custom/haxe/_Int128/Int128_Impl_.h>
#endif
#ifndef INCLUDED_stuff_DanRunElement
#include <stuff/DanRunElement.h>
#endif
#ifndef INCLUDED_stuff_Element
#include <stuff/Element.h>
#endif
#ifndef INCLUDED_stuff_EnemyElement
#include <stuff/EnemyElement.h>
#endif
#ifndef INCLUDED_stuff_Map
#include <stuff/Map.h>
#endif
#ifndef INCLUDED_stuff_TrackerFile
#include <stuff/TrackerFile.h>
#endif
#ifndef INCLUDED_stuff_UtilShit
#include <stuff/UtilShit.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_01f7afc70ed3cd05_12_new,"stuff.EnemyElement","new",0xe01ee720,"stuff.EnemyElement.new","stuff/EnemyElement.hx",12,0x6ea6856f)
namespace stuff{

void EnemyElement_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_01f7afc70ed3cd05_12_new)
HXLINE(  13)		super::__construct();
HXLINE(  15)		Float _hx_tmp = ::Math_obj::random();
HXDLIN(  15)		this->type = ::custom::haxe::_Int128::Int128_Impl__obj::ofInt(::Std_obj::_hx_int((_hx_tmp * ( (Float)(::stuff::UtilShit_obj::level()) ))));
HXLINE(  16)		Float _hx_tmp1 = ::Math_obj::random();
HXDLIN(  16)		this->strengthAcceleration = ::custom::haxe::_Int128::Int128_Impl__obj::ofInt(::Std_obj::_hx_int((_hx_tmp1 * ( (Float)(::stuff::UtilShit_obj::level()) ))));
HXLINE(  17)		Float _hx_tmp2 = ::Math_obj::random();
HXDLIN(  17)		this->speedAcceleration = ::custom::haxe::_Int128::Int128_Impl__obj::ofInt(::Std_obj::_hx_int((_hx_tmp2 * ( (Float)(::stuff::UtilShit_obj::level()) ))));
HXLINE(  18)		Float _hx_tmp3 = ::Math_obj::random();
HXDLIN(  18)		this->size = ::custom::haxe::_Int128::Int128_Impl__obj::ofInt(::Std_obj::_hx_int((_hx_tmp3 * ( (Float)(::stuff::UtilShit_obj::level()) ))));
HXLINE(  19)		this->placementX = ::Std_obj::_hx_int((::Math_obj::random() * ( (Float)(::stuff::Map_obj::BOARD_WIDTH) )));
HXLINE(  21)		::stuff::TrackerFile_obj::putTime();
HXLINE(  22)		::stuff::TrackerFile_obj::addEnemyElement(::hx::ObjectPtr<OBJ_>(this));
HXLINE(  23)		::stuff::TrackerFile_obj::forfeitElement();
            	}

Dynamic EnemyElement_obj::__CreateEmpty() { return new EnemyElement_obj; }

void *EnemyElement_obj::_hx_vtable = 0;

Dynamic EnemyElement_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EnemyElement_obj > _hx_result = new EnemyElement_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool EnemyElement_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24860ab8) {
		if (inClassId<=(int)0x09bcbbce) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x09bcbbce;
		} else {
			return inClassId==(int)0x24860ab8;
		}
	} else {
		return inClassId==(int)0x2c609b68;
	}
}


::hx::ObjectPtr< EnemyElement_obj > EnemyElement_obj::__new() {
	::hx::ObjectPtr< EnemyElement_obj > __this = new EnemyElement_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< EnemyElement_obj > EnemyElement_obj::__alloc(::hx::Ctx *_hx_ctx) {
	EnemyElement_obj *__this = (EnemyElement_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EnemyElement_obj), true, "stuff.EnemyElement"));
	*(void **)__this = EnemyElement_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

EnemyElement_obj::EnemyElement_obj()
{
}

void EnemyElement_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EnemyElement);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(strengthAcceleration,"strengthAcceleration");
	HX_MARK_MEMBER_NAME(speedAcceleration,"speedAcceleration");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(placementX,"placementX");
	HX_MARK_END_CLASS();
}

void EnemyElement_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(strengthAcceleration,"strengthAcceleration");
	HX_VISIT_MEMBER_NAME(speedAcceleration,"speedAcceleration");
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(placementX,"placementX");
}

::hx::Val EnemyElement_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"size") ) { return ::hx::Val( size ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"placementX") ) { return ::hx::Val( placementX ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"speedAcceleration") ) { return ::hx::Val( speedAcceleration ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"strengthAcceleration") ) { return ::hx::Val( strengthAcceleration ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val EnemyElement_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::Array< ::cpp::Int64 > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast< ::Array< ::cpp::Int64 > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"placementX") ) { placementX=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"speedAcceleration") ) { speedAcceleration=inValue.Cast< ::Array< ::cpp::Int64 > >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"strengthAcceleration") ) { strengthAcceleration=inValue.Cast< ::Array< ::cpp::Int64 > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EnemyElement_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("strengthAcceleration",61,5c,f4,9a));
	outFields->push(HX_("speedAcceleration",67,92,e5,2f));
	outFields->push(HX_("size",c1,a0,53,4c));
	outFields->push(HX_("placementX",d3,fe,25,47));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EnemyElement_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::cpp::Int64 > */ ,(int)offsetof(EnemyElement_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsObject /* ::Array< ::cpp::Int64 > */ ,(int)offsetof(EnemyElement_obj,strengthAcceleration),HX_("strengthAcceleration",61,5c,f4,9a)},
	{::hx::fsObject /* ::Array< ::cpp::Int64 > */ ,(int)offsetof(EnemyElement_obj,speedAcceleration),HX_("speedAcceleration",67,92,e5,2f)},
	{::hx::fsObject /* ::Array< ::cpp::Int64 > */ ,(int)offsetof(EnemyElement_obj,size),HX_("size",c1,a0,53,4c)},
	{::hx::fsInt,(int)offsetof(EnemyElement_obj,placementX),HX_("placementX",d3,fe,25,47)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EnemyElement_obj_sStaticStorageInfo = 0;
#endif

static ::String EnemyElement_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("strengthAcceleration",61,5c,f4,9a),
	HX_("speedAcceleration",67,92,e5,2f),
	HX_("size",c1,a0,53,4c),
	HX_("placementX",d3,fe,25,47),
	::String(null()) };

::hx::Class EnemyElement_obj::__mClass;

void EnemyElement_obj::__register()
{
	EnemyElement_obj _hx_dummy;
	EnemyElement_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("stuff.EnemyElement",2e,17,1d,bb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EnemyElement_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EnemyElement_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EnemyElement_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EnemyElement_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace stuff
