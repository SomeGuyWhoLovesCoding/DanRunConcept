// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_custom_haxe_Int128Helper
#include <custom/haxe/Int128Helper.h>
#endif
#ifndef INCLUDED_custom_haxe__Int128_Int128_Impl_
#include <custom/haxe/_Int128/Int128_Impl_.h>
#endif
#ifndef INCLUDED_stuff_Math
#include <stuff/Math.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e6e1e4ccfa9131ce_4_Randomold,"stuff.Math","Randomold",0xf81db498,"stuff.Math.Randomold","stuff/Math.hx",4,0x89eb147b)
HX_LOCAL_STACK_FRAME(_hx_pos_e6e1e4ccfa9131ce_13_Random,"stuff.Math","Random",0x2e7f736f,"stuff.Math.Random","stuff/Math.hx",13,0x89eb147b)
namespace stuff{

void Math_obj::__construct() { }

Dynamic Math_obj::__CreateEmpty() { return new Math_obj; }

void *Math_obj::_hx_vtable = 0;

Dynamic Math_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Math_obj > _hx_result = new Math_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Math_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x45bf8bdc;
}

::Array< ::cpp::Int64 > Math_obj::Randomold(Float time){
            	HX_STACKFRAME(&_hx_pos_e6e1e4ccfa9131ce_4_Randomold)
HXLINE(   5)		::Array< ::cpp::Int64 > val = ::custom::haxe::_Int128::Int128_Impl__obj::fromFloat((time * ( (Float)(1000) )));
HXDLIN(   5)		::Array< ::cpp::Int64 > val1 = ::custom::haxe::_Int128::Int128_Impl__obj::mul(val,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(3000));
HXDLIN(   5)		::Array< ::cpp::Int64 > val2 = ::custom::haxe::_Int128::Int128_Impl__obj::mul(val1,::custom::haxe::Int128Helper_obj::maxValue);
HXLINE(   6)		if (::custom::haxe::_Int128::Int128_Impl__obj::lt(val2,::custom::haxe::_Int128::Int128_Impl__obj::ofInt(0))) {
HXLINE(   6)			return ::custom::haxe::_Int128::Int128_Impl__obj::neg(val2);
            		}
            		else {
HXLINE(   6)			return val2;
            		}
HXDLIN(   6)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Math_obj,Randomold,return )

::Array< ::cpp::Int64 > Math_obj::Random(int from,int to){
            	HX_STACKFRAME(&_hx_pos_e6e1e4ccfa9131ce_13_Random)
HXDLIN(  13)		int _hx_tmp = (((to - from) + 1) *  ::stuff::Math_obj::random());
HXDLIN(  13)		return (from +  ::stuff::Math_obj::floor(_hx_tmp));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Math_obj,Random,return )


Math_obj::Math_obj()
{
}

bool Math_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"Random") ) { outValue = Random_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"Randomold") ) { outValue = Randomold_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Math_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Math_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Math_obj::__mClass;

static ::String Math_obj_sStaticFields[] = {
	HX_("Randomold",64,3a,35,49),
	HX_("Random",23,96,23,ec),
	::String(null())
};

void Math_obj::__register()
{
	Math_obj _hx_dummy;
	Math_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("stuff.Math",a2,d1,77,24);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Math_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Math_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Math_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Math_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Math_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace stuff
