// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe__Int64_Int64_Impl_
#include <haxe/_Int64/Int64_Impl_.h>
#endif
#ifndef INCLUDED_stuff_UtilShit
#include <stuff/UtilShit.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_83251e7f5df5f50d_6_time,"stuff.UtilShit","time",0xf05cafff,"stuff.UtilShit.time","stuff/UtilShit.hx",6,0xfe9a6c21)
HX_LOCAL_STACK_FRAME(_hx_pos_83251e7f5df5f50d_10_level,"stuff.UtilShit","level",0xc2eaa552,"stuff.UtilShit.level","stuff/UtilShit.hx",10,0xfe9a6c21)
namespace stuff{

void UtilShit_obj::__construct() { }

Dynamic UtilShit_obj::__CreateEmpty() { return new UtilShit_obj; }

void *UtilShit_obj::_hx_vtable = 0;

Dynamic UtilShit_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< UtilShit_obj > _hx_result = new UtilShit_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool UtilShit_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1d96b012;
}

::cpp::Int64 UtilShit_obj::time(){
            	HX_STACKFRAME(&_hx_pos_83251e7f5df5f50d_6_time)
HXDLIN(   6)		return ::haxe::_Int64::Int64_Impl__obj::fromFloat((::Sys_obj::time() * ( (Float)(100) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(UtilShit_obj,time,return )

int UtilShit_obj::level(){
            	HX_STACKFRAME(&_hx_pos_83251e7f5df5f50d_10_level)
HXDLIN(  10)		return 80;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(UtilShit_obj,level,return )


UtilShit_obj::UtilShit_obj()
{
}

bool UtilShit_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { outValue = time_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"level") ) { outValue = level_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *UtilShit_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *UtilShit_obj_sStaticStorageInfo = 0;
#endif

::hx::Class UtilShit_obj::__mClass;

static ::String UtilShit_obj_sStaticFields[] = {
	HX_("time",0d,cc,fc,4c),
	HX_("level",84,15,63,72),
	::String(null())
};

void UtilShit_obj::__register()
{
	UtilShit_obj _hx_dummy;
	UtilShit_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("stuff.UtilShit",bc,01,a3,30);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &UtilShit_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(UtilShit_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< UtilShit_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UtilShit_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UtilShit_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace stuff
