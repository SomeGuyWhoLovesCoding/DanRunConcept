// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_stuff_Map
#include <stuff/Map.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b6eef94cd7f9557e_4_boot,"stuff.Map","boot",0x748eb81e,"stuff.Map.boot","stuff/Map.hx",4,0x360df2bd)
HX_LOCAL_STACK_FRAME(_hx_pos_b6eef94cd7f9557e_5_boot,"stuff.Map","boot",0x748eb81e,"stuff.Map.boot","stuff/Map.hx",5,0x360df2bd)
namespace stuff{

void Map_obj::__construct() { }

Dynamic Map_obj::__CreateEmpty() { return new Map_obj; }

void *Map_obj::_hx_vtable = 0;

Dynamic Map_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Map_obj > _hx_result = new Map_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Map_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x186b9f08;
}

int Map_obj::BOARD_WIDTH;

Float Map_obj::MAP_SPEED;


Map_obj::Map_obj()
{
}

bool Map_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"MAP_SPEED") ) { outValue = ( MAP_SPEED ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"BOARD_WIDTH") ) { outValue = ( BOARD_WIDTH ); return true; }
	}
	return false;
}

bool Map_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"MAP_SPEED") ) { MAP_SPEED=ioValue.Cast< Float >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"BOARD_WIDTH") ) { BOARD_WIDTH=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Map_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Map_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Map_obj::BOARD_WIDTH,HX_("BOARD_WIDTH",2d,9c,b2,c1)},
	{::hx::fsFloat,(void *) &Map_obj::MAP_SPEED,HX_("MAP_SPEED",24,c2,5f,f2)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Map_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Map_obj::BOARD_WIDTH,"BOARD_WIDTH");
	HX_MARK_MEMBER_NAME(Map_obj::MAP_SPEED,"MAP_SPEED");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Map_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Map_obj::BOARD_WIDTH,"BOARD_WIDTH");
	HX_VISIT_MEMBER_NAME(Map_obj::MAP_SPEED,"MAP_SPEED");
};

#endif

::hx::Class Map_obj::__mClass;

static ::String Map_obj_sStaticFields[] = {
	HX_("BOARD_WIDTH",2d,9c,b2,c1),
	HX_("MAP_SPEED",24,c2,5f,f2),
	::String(null())
};

void Map_obj::__register()
{
	Map_obj _hx_dummy;
	Map_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("stuff.Map",02,b4,85,50);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Map_obj::__GetStatic;
	__mClass->mSetStaticField = &Map_obj::__SetStatic;
	__mClass->mMarkFunc = Map_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Map_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Map_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Map_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Map_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Map_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Map_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b6eef94cd7f9557e_4_boot)
HXDLIN(   4)		BOARD_WIDTH = 600;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b6eef94cd7f9557e_5_boot)
HXDLIN(   5)		MAP_SPEED = ((Float)0.1);
            	}
}

} // end namespace stuff
