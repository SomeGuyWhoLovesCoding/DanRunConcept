// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_custom_haxe__Int128_Int128_Impl_
#include <custom/haxe/_Int128/Int128_Impl_.h>
#endif
#ifndef INCLUDED_stuff_CookingPanElement
#include <stuff/CookingPanElement.h>
#endif
#ifndef INCLUDED_stuff_CookingPanRGB
#include <stuff/CookingPanRGB.h>
#endif
#ifndef INCLUDED_stuff_DanRunElement
#include <stuff/DanRunElement.h>
#endif
#ifndef INCLUDED_stuff_Element
#include <stuff/Element.h>
#endif
#ifndef INCLUDED_stuff_EnemyElement
#include <stuff/EnemyElement.h>
#endif
#ifndef INCLUDED_stuff_TrackerFile
#include <stuff/TrackerFile.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_4_main,"Main","main",0xed0e206e,"Main.main","Main.hx",4,0x087e5c05)

void Main_obj::__construct() { }

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x07825a7d;
}

void Main_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_4_main)
HXLINE(   5)		::stuff::TrackerFile_obj::init();
HXLINE(   6)		{
HXLINE(   6)			int _g = 0;
HXDLIN(   6)			while((_g < 100)){
HXLINE(   6)				_g = (_g + 1);
HXDLIN(   6)				int i = (_g - 1);
HXLINE(   7)				 ::stuff::EnemyElement enemy =  ::stuff::EnemyElement_obj::__alloc( HX_CTX );
HXLINE(   8)				::String _hx_tmp;
HXDLIN(   8)				if (::hx::IsNull( enemy->type )) {
HXLINE(   8)					_hx_tmp = HX_("null",87,9e,0e,49);
            				}
            				else {
HXLINE(   8)					_hx_tmp = ::custom::haxe::_Int128::Int128_Impl__obj::toString(enemy->type);
            				}
HXDLIN(   8)				::Sys_obj::println((HX_("Enemy Type: ",f8,a6,a7,8d) + _hx_tmp));
HXLINE(   9)				::String _hx_tmp1;
HXDLIN(   9)				if (::hx::IsNull( enemy->strengthAcceleration )) {
HXLINE(   9)					_hx_tmp1 = HX_("null",87,9e,0e,49);
            				}
            				else {
HXLINE(   9)					_hx_tmp1 = ::custom::haxe::_Int128::Int128_Impl__obj::toString(enemy->strengthAcceleration);
            				}
HXDLIN(   9)				::Sys_obj::println((HX_("Enemy Strength: ",7f,b2,33,c9) + _hx_tmp1));
HXLINE(  10)				::String _hx_tmp2;
HXDLIN(  10)				if (::hx::IsNull( enemy->speedAcceleration )) {
HXLINE(  10)					_hx_tmp2 = HX_("null",87,9e,0e,49);
            				}
            				else {
HXLINE(  10)					_hx_tmp2 = ::custom::haxe::_Int128::Int128_Impl__obj::toString(enemy->speedAcceleration);
            				}
HXDLIN(  10)				::Sys_obj::println((HX_("Enemy Speed: ",d5,4f,f6,4c) + _hx_tmp2));
HXLINE(  11)				::String _hx_tmp3;
HXDLIN(  11)				if (::hx::IsNull( enemy->size )) {
HXLINE(  11)					_hx_tmp3 = HX_("null",87,9e,0e,49);
            				}
            				else {
HXLINE(  11)					_hx_tmp3 = ::custom::haxe::_Int128::Int128_Impl__obj::toString(enemy->size);
            				}
HXDLIN(  11)				::Sys_obj::println((HX_("Enemy Size: ",bf,24,7f,f7) + _hx_tmp3));
HXLINE(  12)				::Sys_obj::println((HX_("Enemy PlacementX: ",51,0d,a7,9e) + enemy->placementX));
HXLINE(  13)				 ::stuff::CookingPanElement cooking =  ::stuff::CookingPanElement_obj::__alloc( HX_CTX );
HXLINE(  14)				::String _hx_tmp4;
HXDLIN(  14)				if (::hx::IsNull( cooking->type )) {
HXLINE(  14)					_hx_tmp4 = HX_("null",87,9e,0e,49);
            				}
            				else {
HXLINE(  14)					_hx_tmp4 = ::custom::haxe::_Int128::Int128_Impl__obj::toString(cooking->type);
            				}
HXDLIN(  14)				::Sys_obj::println((HX_("Cooking Pan Type: ",e9,2b,72,f3) + _hx_tmp4));
HXLINE(  15)				::Sys_obj::println((HX_("Is that Cooking Pan Dan's?: ",d4,63,d2,de) + ::Std_obj::string(cooking->isVanilla)));
HXLINE(  16)				if (cooking->isVanilla) {
HXLINE(  17)					::Sys_obj::println(HX_("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",80,68,32,0d));
            				}
HXLINE(  19)				::Sys_obj::println((HX_("Cooking Pan Color: ",a0,26,22,07) + ((((cooking->colorValues->black + HX_(", ",74,26,00,00)) + cooking->colorValues->lime) + HX_(", ",74,26,00,00)) + cooking->colorValues->red)));
HXLINE(  20)				::Sys_obj::println((HX_("Cooking Pan PlacementX: ",02,5d,e1,ae) + cooking->placementX));
            			}
            		}
HXLINE(  22)		::stuff::TrackerFile_obj::close();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))


Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

